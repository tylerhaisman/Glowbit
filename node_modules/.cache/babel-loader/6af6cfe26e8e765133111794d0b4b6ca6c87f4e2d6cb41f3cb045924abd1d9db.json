{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  let gameOver = false;\n  let r = 2;\n  let c = 2;\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        newDriver[i][j] = {\n          isClicked: false,\n          value: getRandomValue()\n        };\n      }\n    }\n    return newDriver;\n  });\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n  memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n  const handleClick = (row, col) => {\n    setDriver(prevDriver => {\n      const newDriver = [...prevDriver];\n      newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n      return newDriver;\n    });\n  };\n  let currentSum = 0;\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      if (driver[i][j].isClicked) {\n        currentSum += driver[i][j].value;\n      }\n      rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n        value: driver[i][j].value,\n        isClicked: driver[i][j].isClicked,\n        onClick: () => handleClick(i, j)\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this));\n    }\n    gameboardRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: rowCells\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 24\n    }, this));\n  }\n  if (currentSum == targetSum) {\n    gameOver = true;\n    console.log(\"GAME OVER\");\n  }\n  console.log(currentSum, \" \", targetSum);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: gameboardRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"62np00mq3lAUOPCXOC48+HeIlF8=\");\n_c = Gameboard;\nexport default Gameboard;\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n\n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","gameOver","r","c","driver","setDriver","newDriver","i","j","isClicked","value","memoizationTable","rowCells","push","numRows","length","numCols","row","col","val","targetSum","handleClick","prevDriver","currentSum","gameboardRows","onClick","fileName","_jsxFileName","lineNumber","columnNumber","children","console","log","className","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["import { useState } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n\n  let gameOver = false;\n\n  let r = 2;\n  let c = 2;\n\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        newDriver[i][j] = { isClicked: false, value: getRandomValue() };\n      }\n    }\n    return newDriver;\n  });\n\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n\n    memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n\n  const handleClick = (row, col) => {\n    setDriver(prevDriver => {\n      const newDriver = [...prevDriver];\n      newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n      return newDriver;\n    });\n  };\n\n  let currentSum = 0;\n\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n\n      if(driver[i][j].isClicked){\n        currentSum += driver[i][j].value;\n      }\n\n      rowCells.push(\n        <Cell\n          key={`${i}-${j}`}\n          value={driver[i][j].value}\n          isClicked={driver[i][j].isClicked}\n          onClick={() => handleClick(i, j)}\n        />\n      );\n    }\n    gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n  }\n\n  if(currentSum == targetSum){\n    gameOver = true;\n    console.log(\"GAME OVER\");\n  }\n\n  console.log(currentSum, \" \", targetSum);\n\n  return (\n    <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Gameboard;\n\n\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n  \n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}