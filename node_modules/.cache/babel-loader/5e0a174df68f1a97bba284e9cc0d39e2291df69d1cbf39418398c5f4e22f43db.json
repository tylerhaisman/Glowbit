{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < 6; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < 6; j++) {\n        newDriver[i][j] = {\n          isClicked: false,\n          value: getRandomValue()\n        };\n      }\n    }\n    return newDriver;\n  });\n  const handleClick = (row, col) => {\n    setDriver(prevDriver => {\n      const newDriver = [...prevDriver];\n      newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n      return newDriver;\n    });\n  };\n  const gameboardRows = [];\n  for (let i = 0; i < 6; i++) {\n    const rowCells = [];\n    for (let j = 0; j < 6; j++) {\n      console.log(driver[i][j].isClicked);\n      rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n        value: driver[i][j].value,\n        isClicked: driver[i][j].isClicked,\n        onClick: () => handleClick(i, j)\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this));\n    }\n    gameboardRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: rowCells\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 24\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: gameboardRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"Key9w2mMChTKTLTywUzZVfL0JzQ=\");\n_c = Gameboard;\nexport default Gameboard;\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n\n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","driver","setDriver","newDriver","i","j","isClicked","value","handleClick","row","col","prevDriver","gameboardRows","rowCells","console","log","push","onClick","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["import { useState } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < 6; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < 6; j++) {\n        newDriver[i][j] = { isClicked: false, value: getRandomValue() };\n      }\n    }\n    return newDriver;\n  });\n\n  const handleClick = (row, col) => {\n    setDriver(prevDriver => {\n      const newDriver = [...prevDriver];\n      newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n      return newDriver;\n    });\n  };\n\n  const gameboardRows = [];\n  for (let i = 0; i < 6; i++) {\n    const rowCells = [];\n    for (let j = 0; j < 6; j++) {\n      console.log(driver[i][j].isClicked);\n      rowCells.push(\n        <Cell\n          key={`${i}-${j}`}\n          value={driver[i][j].value}\n          isClicked={driver[i][j].isClicked}\n          onClick={() => handleClick(i, j)}\n        />\n      );\n    }\n    gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n  }\n\n  return (\n    <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Gameboard;\n\n\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n  \n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGC,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD;AAEA,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,MAAM;IACzC,MAAMc,SAAS,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,SAAS,CAACC,CAAC,CAAC,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BF,SAAS,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;UAAEC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAEd,cAAc,CAAC;QAAE,CAAC;MACjE;IACF;IACA,OAAOU,SAAS;EAClB,CAAC,CAAC;EAEF,MAAMK,WAAW,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAChCR,SAAS,CAACS,UAAU,IAAI;MACtB,MAAMR,SAAS,GAAG,CAAC,GAAGQ,UAAU,CAAC;MACjCR,SAAS,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,CAACJ,SAAS,GAAG,CAACH,SAAS,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,CAACJ,SAAS;MAC9D,OAAOH,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMS,aAAa,GAAG,EAAE;EACxB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,MAAMS,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BS,OAAO,CAACC,GAAG,CAACd,MAAM,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACC,SAAS,CAAC;MACnCO,QAAQ,CAACG,IAAI,eACXxB,OAAA,CAACF,IAAI;QAEHiB,KAAK,EAAEN,MAAM,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACE,KAAM;QAC1BD,SAAS,EAAEL,MAAM,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACC,SAAU;QAClCW,OAAO,EAAEA,CAAA,KAAMT,WAAW,CAACJ,CAAC,EAAEC,CAAC;MAAE,GAH3B,GAAED,CAAE,IAAGC,CAAE,EAAC;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIjB,CACH,CAAC;IACH;IACAT,aAAa,CAACI,IAAI,eAACxB,OAAA;MAAA8B,QAAA,EAAaT;IAAQ,GAAZT,CAAC;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC,CAAC;EACjD;EAEA,oBACE7B,OAAA;IAAK+B,SAAS,EAAC,WAAW;IAAAD,QAAA,eACxB9B,OAAA;MAAA8B,QAAA,eACE9B,OAAA;QAAA8B,QAAA,EAAQV;MAAa;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACrB,EAAA,CA5CID,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AA8Cf,eAAeA,SAAS;;AAIxyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}