{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\";\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  const rows = 6;\n  const cols = 6;\n  let driver = [];\n  function getDriver() {\n    for (let i = 0; i < rows; i++) {\n      driver[i] = [];\n      for (let j = 0; j < cols; j++) {\n        driver[i][j] = {\n          isClicked: false,\n          value: getRandomValue()\n        };\n      }\n    }\n    return driver;\n  }\n  const gameboardRows = [];\n  function updateBoard() {\n    gameboardRows = [];\n    // create an array of rows with cells in them\n    for (let i = 0; i < rows; i++) {\n      const rowCells = [];\n      for (let j = 0; j < cols; j++) {\n        rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n          value: getDriver()[i][j].value,\n          isClicked: getDriver()[i][j].isClicked,\n          onClick: () => handleClick(i, j)\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this));\n      }\n      gameboardRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: rowCells\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 30\n      }, this));\n    }\n  }\n\n  //updating values whenever user clicks on a cell\n  const handleClick = (row, col) => {\n    driver[row][col].isClicked = !driver[row][col].isClicked;\n    updateBoard();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: gameboardRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_c = Gameboard;\nexport default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","useEffect","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","rows","cols","driver","getDriver","i","j","isClicked","value","gameboardRows","updateBoard","rowCells","push","onClick","handleClick","fileName","_jsxFileName","lineNumber","columnNumber","children","row","col","className","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n\n  const rows = 6;\n  const cols = 6;\n  let driver = [];\n\n  function getDriver(){\n    for(let i = 0; i < rows; i++){\n      driver[i] = [];\n        for(let j = 0; j < cols; j++){\n          driver[i][j] = {isClicked: false, value: getRandomValue()};\n        }\n    }\n    return driver;\n  }\n\n  const gameboardRows = [];\n  function updateBoard(){\n    gameboardRows = [];\n        // create an array of rows with cells in them\n        for (let i = 0; i < rows; i++) {\n          const rowCells = [];\n          for (let j = 0; j < cols; j++) {\n            rowCells.push(\n              <Cell\n                key={`${i}-${j}`}\n                value={getDriver()[i][j].value}\n                isClicked={getDriver()[i][j].isClicked}\n                onClick={() => handleClick(i, j)}\n              />\n            );\n          }\n          gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n        }\n  }\n  \n  //updating values whenever user clicks on a cell\n  const handleClick = (row, col) => {\n    driver[row][col].isClicked = !driver[row][col].isClicked;\n    updateBoard();\n  };\n  \n  return (\n    <div className=\"gameboard\">\n      <table>\n        <tbody>\n          {gameboardRows}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGC,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD;AAEA,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAEtB,MAAMC,IAAI,GAAG,CAAC;EACd,MAAMC,IAAI,GAAG,CAAC;EACd,IAAIC,MAAM,GAAG,EAAE;EAEf,SAASC,SAASA,CAAA,EAAE;IAClB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAC;MAC3BF,MAAM,CAACE,CAAC,CAAC,GAAG,EAAE;MACZ,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAC;QAC3BH,MAAM,CAACE,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;UAACC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAEd,cAAc,CAAC;QAAC,CAAC;MAC5D;IACJ;IACA,OAAOS,MAAM;EACf;EAEA,MAAMM,aAAa,GAAG,EAAE;EACxB,SAASC,WAAWA,CAAA,EAAE;IACpBD,aAAa,GAAG,EAAE;IACd;IACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;MAC7B,MAAMM,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;QAC7BK,QAAQ,CAACC,IAAI,eACXnB,OAAA,CAACF,IAAI;UAEHiB,KAAK,EAAEJ,SAAS,CAAC,CAAC,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACE,KAAM;UAC/BD,SAAS,EAAEH,SAAS,CAAC,CAAC,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACC,SAAU;UACvCM,OAAO,EAAEA,CAAA,KAAMC,WAAW,CAACT,CAAC,EAAEC,CAAC;QAAE,GAH3B,GAAED,CAAE,IAAGC,CAAE,EAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIjB,CACH,CAAC;MACH;MACAT,aAAa,CAACG,IAAI,eAACnB,OAAA;QAAA0B,QAAA,EAAaR;MAAQ,GAAZN,CAAC;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC,CAAC;IACjD;EACN;;EAEA;EACA,MAAMJ,WAAW,GAAGA,CAACM,GAAG,EAAEC,GAAG,KAAK;IAChClB,MAAM,CAACiB,GAAG,CAAC,CAACC,GAAG,CAAC,CAACd,SAAS,GAAG,CAACJ,MAAM,CAACiB,GAAG,CAAC,CAACC,GAAG,CAAC,CAACd,SAAS;IACxDG,WAAW,CAAC,CAAC;EACf,CAAC;EAED,oBACEjB,OAAA;IAAK6B,SAAS,EAAC,WAAW;IAAAH,QAAA,eACxB1B,OAAA;MAAA0B,QAAA,eACE1B,OAAA;QAAA0B,QAAA,EACGV;MAAa;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAK,EAAA,GAnDKvB,SAAS;AAqDf,eAAeA,SAAS;;AAExB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}