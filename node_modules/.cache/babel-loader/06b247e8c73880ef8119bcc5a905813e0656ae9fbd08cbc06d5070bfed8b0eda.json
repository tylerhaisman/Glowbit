{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Cell from './Cell';\n\n//initializing table values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet previousRow = -1;\nlet previousCol = -1;\n\n//initializing time-tracking values\nvar start = 0;\nvar totalTime = 0;\n\n//initializing count of successful clicks\nlet count = 0;\nconst Gameboard = props => {\n  _s();\n  //initializing game tracking values\n  let gameOver = false;\n  let win = false;\n\n  //initializing level value using the level prop passed into \"Gameboard\"\n  let currentLevel = 80;\n\n  //initializing number of rows and columns which will each be 1 greater than the current level\n  let r = currentLevel + 1;\n  let c = currentLevel + 1;\n\n  //initializing the random number generator\n  function getRandomValue() {\n    let max = r * c;\n    let min = 1;\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  //initializing the gameboard 2D array\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        //essentially the array holds a JavaScript object with three key-value pairs\n        newDriver[i][j] = {\n          isClicked: false,\n          value: getRandomValue(),\n          canBe: false\n        };\n      }\n    }\n    //setting that the first node in the upper left can be clicked\n    newDriver[0][0].canBe = true;\n    return newDriver;\n  });\n\n  //initializing memoization table for solution computation\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n\n  //calculating the global solution using the values from the memoization table\n  memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n\n  //target sum == the number in the lower right-hand corner of the memoization table\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n\n  //function that runs every time a user clicks on a table cell\n  const handleClick = (row, col) => {\n    if (!gameOver) {\n      //checking to see if the cell \"can\" be clicked (must be to the immediate right of the previous cell or immediately beneath)\n      if (row - 1 == previousRow && col == previousCol || row == previousRow && col - 1 == previousCol || row == 0 && col == 0 && driver[row][col].isClicked == false) {\n        setDriver(prevDriver => {\n          count++;\n          if (count == 1) {\n            //running stopwatch to track execution time\n            start = new Date().getTime();\n          }\n          const newDriver = [...prevDriver];\n\n          //setting the cell that was clicked to true\n          newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n\n          //checking to see if the next cells that can be clicked are in bounds\n          if (row + 1 < newDriver.length) {\n            //setting can be clicked to true\n            newDriver[row + 1][col].canBe = true;\n          }\n          if (col + 1 < newDriver.length) {\n            //setting can be clicked to true\n            newDriver[row][col + 1].canBe = true;\n          }\n          //updating the current cell so it can no longer be \"clicked\" as well as the other cell that may have been set to true\n          newDriver[row][col].canBe = false;\n          if (row - 1 >= 0 && col + 1 < newDriver[0].length) {\n            newDriver[row - 1][col + 1].canBe = false;\n          }\n          if (col - 1 >= 0 && row + 1 < newDriver.length) {\n            newDriver[row + 1][col - 1].canBe = false;\n          }\n\n          //updating previousRow and previousCol\n          previousRow = row;\n          previousCol = col;\n          return newDriver;\n        });\n      }\n    }\n  };\n\n  //summing the currently isClicked nodes\n  let currentSum = 0;\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      if (driver[i][j].isClicked) {\n        currentSum += driver[i][j].value;\n      }\n      //if the sum of all clicked nodes is equal to the target sum and the game is over, player wins\n      if (driver[r - 1][c - 1].isClicked && currentSum == targetSum) {\n        gameOver = true;\n        win = true;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time / 1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Won!\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #1aff00\";\n        document.getElementById(\"winstatus\").style.color = \"#1aff00\";\n        document.getElementById(\"endbtn\").textContent = \"Next Level\";\n      }\n      //if the sum of all clicked nodes is not equal to the target sum and the game is over, player loses\n      if (driver[r - 1][c - 1].isClicked && currentSum != targetSum) {\n        gameOver = true;\n        win = false;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time / 1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Lost\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #ff0000\";\n        document.getElementById(\"winstatus\").style.color = \"#ff0000\";\n        document.getElementById(\"endbtn\").textContent = \"Play Again\";\n      }\n      //pushing all cells to the row\n      rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n        value: driver[i][j].value,\n        isClicked: driver[i][j].isClicked,\n        onClick: () => handleClick(i, j),\n        isGameOver: gameOver,\n        winStatus: win,\n        canBeClicked: driver[i][j].canBe\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this));\n    }\n    //pushing all rows to the gameboard\n    gameboardRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: rowCells\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 24\n    }, this));\n  }\n\n  //resetting the gameboard after the user clicks a button (\"Next Level\" or \"Play Again\")\n  const handleReset = () => {\n    if (!win) {\n      window.location.reload();\n    } else {\n      props.resetGame();\n      previousRow = -1;\n      previousCol = -1;\n      start = 0;\n      totalTime = 0;\n      count = 0;\n      currentSum = 0;\n      gameOver = false;\n      win = false;\n      setDriver(prevDriver => {\n        currentLevel++;\n        r = currentLevel + 1;\n        c = currentLevel + 1;\n        const newDriver = [];\n        for (let i = 0; i < r; i++) {\n          newDriver[i] = [];\n          for (let j = 0; j < c; j++) {\n            newDriver[i][j] = {\n              isClicked: false,\n              value: getRandomValue()\n            };\n          }\n        }\n        newDriver[0][0].canBe = true;\n        return newDriver;\n      });\n      document.getElementById(\"aftergame\").style.visibility = \"hidden\";\n    }\n  };\n\n  // const handleRefresh = () => {\n  //   window.location.reload();\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: gameboardRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"aftergame\",\n      className: \"gameover\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"gameover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"winstatus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"runtime\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"buttons\",\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          id: \"endbtn\",\n          children: \"Next Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 11\n  }, this);\n};\n_s(Gameboard, \"Ofp4xxkEVyWETSVTstDRHzyURqk=\");\n_c = Gameboard;\nexport default Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","previousRow","previousCol","start","totalTime","count","Gameboard","props","_s","gameOver","win","currentLevel","r","c","getRandomValue","max","min","Math","floor","random","driver","setDriver","newDriver","i","j","isClicked","value","canBe","memoizationTable","rowCells","push","numRows","length","numCols","row","col","val","targetSum","handleClick","prevDriver","Date","getTime","currentSum","gameboardRows","end","time","toFixed","document","getElementById","textContent","style","visibility","textShadow","color","onClick","isGameOver","winStatus","canBeClicked","fileName","_jsxFileName","lineNumber","columnNumber","children","handleReset","window","location","reload","resetGame","className","id","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/Gameboard.js"],"sourcesContent":["import { useState } from 'react';\n\nimport Cell from './Cell';\n\n//initializing table values\nlet previousRow = -1;\nlet previousCol = -1;\n\n//initializing time-tracking values\nvar start = 0;\nvar totalTime = 0;\n\n//initializing count of successful clicks\nlet count = 0;\n\nconst Gameboard = (props) => {\n\n  //initializing game tracking values\n  let gameOver = false;\n  let win = false;\n\n  //initializing level value using the level prop passed into \"Gameboard\"\n  let currentLevel = 80;\n\n  //initializing number of rows and columns which will each be 1 greater than the current level\n  let r = currentLevel + 1;\n  let c = currentLevel + 1;\n\n  //initializing the random number generator\n  function getRandomValue() {\n    let max = r * c;\n    let min = 1;\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  //initializing the gameboard 2D array\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        //essentially the array holds a JavaScript object with three key-value pairs\n        newDriver[i][j] = { isClicked: false, value: getRandomValue(), canBe: false };\n      }\n    }\n    //setting that the first node in the upper left can be clicked\n    newDriver[0][0].canBe = true;\n    return newDriver;\n  });\n\n  //initializing memoization table for solution computation\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n\n  //calculating the global solution using the values from the memoization table\n    memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n\n  //target sum == the number in the lower right-hand corner of the memoization table\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n\n  //function that runs every time a user clicks on a table cell\n  const handleClick = (row, col) => {\n    if(!gameOver){\n      //checking to see if the cell \"can\" be clicked (must be to the immediate right of the previous cell or immediately beneath)\n      if((row - 1 == previousRow && col == previousCol) || (row == previousRow && col - 1 == previousCol) || ((row == 0 && col == 0) && driver[row][col].isClicked == false)){\n        setDriver(prevDriver => {\n          count++;\n          if(count == 1){\n            //running stopwatch to track execution time\n            start = new Date().getTime();\n          }\n          const newDriver = [...prevDriver];\n\n          //setting the cell that was clicked to true\n          newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n\n          //checking to see if the next cells that can be clicked are in bounds\n          if(row + 1 < newDriver.length){\n            //setting can be clicked to true\n            newDriver[row + 1][col].canBe = true;\n          }\n          if(col + 1 < newDriver.length){\n            //setting can be clicked to true\n            newDriver[row][col + 1].canBe = true;\n          }\n          //updating the current cell so it can no longer be \"clicked\" as well as the other cell that may have been set to true\n          newDriver[row][col].canBe = false;\n          if((row - 1 >= 0) && (col + 1 < newDriver[0].length)){\n            newDriver[row - 1][col + 1].canBe = false;\n          }\n          if((col - 1 >= 0) && (row + 1 < newDriver.length)){\n            newDriver[row + 1][col - 1].canBe = false;\n          }\n\n          //updating previousRow and previousCol\n          previousRow = row;\n          previousCol = col;\n\n          return newDriver;\n        });\n      }\n    }\n  };\n\n  //summing the currently isClicked nodes\n  let currentSum = 0;\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      if(driver[i][j].isClicked){\n        currentSum += driver[i][j].value;\n      }\n      //if the sum of all clicked nodes is equal to the target sum and the game is over, player wins\n      if(driver[r - 1][c - 1].isClicked && currentSum == targetSum){\n        gameOver = true;\n        win = true;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Won!\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #1aff00\";\n        document.getElementById(\"winstatus\").style.color = \"#1aff00\";\n        document.getElementById(\"endbtn\").textContent = \"Next Level\";\n      }\n      //if the sum of all clicked nodes is not equal to the target sum and the game is over, player loses\n      if(driver[r - 1][c - 1].isClicked && currentSum != targetSum){\n        gameOver = true;\n        win = false;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Lost\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #ff0000\";\n        document.getElementById(\"winstatus\").style.color = \"#ff0000\";\n        document.getElementById(\"endbtn\").textContent = \"Play Again\";\n      }\n      //pushing all cells to the row\n      rowCells.push(\n        <Cell\n          key={`${i}-${j}`}\n          value={driver[i][j].value}\n          isClicked={driver[i][j].isClicked}\n          onClick={() => handleClick(i, j)}\n          isGameOver={gameOver}\n          winStatus={win}\n          canBeClicked={driver[i][j].canBe}\n        />\n      );\n    }\n    //pushing all rows to the gameboard\n    gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n  }\n\n  //resetting the gameboard after the user clicks a button (\"Next Level\" or \"Play Again\")\n  const handleReset = () => {\n    if(!win){\n      window.location.reload();\n    }\n    else{\n      props.resetGame();\n\n      previousRow = -1;\n      previousCol = -1;\n      start = 0;\n      totalTime = 0;\n      count = 0;\n      currentSum = 0;\n  \n      gameOver = false;\n      win = false;\n  \n      setDriver(prevDriver => {\n  \n        currentLevel++;\n  \n        r = currentLevel + 1;\n        c = currentLevel + 1;\n  \n        const newDriver = [];\n      for (let i = 0; i < r; i++) {\n        newDriver[i] = [];\n        for (let j = 0; j < c; j++) {\n          newDriver[i][j] = { isClicked: false, value: getRandomValue() };\n        }\n      }\n      newDriver[0][0].canBe = true;\n      return newDriver;\n      });  \n      document.getElementById(\"aftergame\").style.visibility = \"hidden\";\n    }\n  };\n\n  // const handleRefresh = () => {\n  //   window.location.reload();\n  // };\n\n  return (\n          <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n      <div id=\"aftergame\" className=\"gameover\">\n            <h1 id=\"gameover\"></h1>\n            <h2 id=\"winstatus\"></h2>\n            <div className=\"runtime\">\n            <p id=\"time\"></p>\n          </div>\n          <div id=\"buttons\" className=\"buttons\">\n            <button onClick={handleReset} id=\"endbtn\">Next Level</button>\n          </div>\n          </div>\n    </div>\n  );\n};\n\nexport default Gameboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}