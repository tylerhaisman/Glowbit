{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   //initializing driver table\n//   const [board, setBoard] = useState([\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null]\n//   ]);\n//   const [values, setValues] = useState([]);\n//   useEffect(() => {\n//     const newBoard = board.map(row =>\n//       row.map(() => ({ isClicked: false, value: getRandomValue() }))\n//     );\n//     setBoard(newBoard);\n//     setValues(newBoard.flat().map(pair => pair.value));\n//   }, []);\n\n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     const updatedBoard = [...board];\n//     updatedBoard[row][col].isClicked = !board[row][col].isClicked;\n//     setBoard(updatedBoard);\n//   };\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map(({ isClicked, value }, colIndex) => (\n//                 <Cell value={value} key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//   //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\n\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  //initializing driver table\n  const [board, setBoard] = useState([[{\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }], [{\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }], [{\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }], [{\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }], [{\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }], [{\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }, {\n    isClicked: false,\n    value: 0\n  }]]);\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    const newBoard = board.map(row => row.map(() => ({\n      isClicked: false,\n      value: getRandomValue()\n    })));\n    setBoard(newBoard);\n    setValues(newBoard.flat().map(pair => pair.value));\n  }, []);\n\n  //updating values whenever user clicks on a cell\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col].isClicked = !board[row][col].isClicked;\n    setBoard(updatedBoard);\n  };\n\n  //creating memoization table for dynamic programming\n  let numRows = board.length;\n  let numCols = board[0].length;\n  const [memoizationTable, setMemoization] = useState([]);\n  useEffect(() => {\n    let numRows = board.length;\n    let numCols = board[0].length;\n    let memoizationTable = Array(numRows).fill().map(() => Array(numCols).fill(0));\n    memoizationTable[0][0] = board[0][0].value;\n    for (let row = 1; row < numRows; row++) {\n      memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n    }\n    for (let col = 1; col < numCols; col++) {\n      memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n    }\n    for (let row = 1; row < numRows; row++) {\n      for (let col = 1; col < numCols; col++) {\n        let val = 0;\n        if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n          val = memoizationTable[row - 1][col];\n        } else {\n          val = memoizationTable[row][col - 1];\n        }\n        memoizationTable[row][col] = val + board[row][col].value;\n      }\n    }\n    setMemoization(memoizationTable);\n  }, [board]);\n  console.log(memoizationTable);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n            value: cell === null || cell === void 0 ? void 0 : cell.value,\n            isClicked: cell === null || cell === void 0 ? void 0 : cell.isClicked,\n            onClick: () => handleClick(rowIndex, colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"d6t6UYb2JP8dIeVBYNOhDzPWCj4=\");\n_c = Gameboard;\nexport default Gameboard;\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","useEffect","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","board","setBoard","isClicked","value","values","setValues","newBoard","map","row","flat","pair","handleClick","col","updatedBoard","numRows","length","numCols","memoizationTable","setMemoization","Array","fill","val","console","log","className","children","rowIndex","cell","colIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n\n// const Gameboard = () => {\n\n//   //initializing driver table\n//   const [board, setBoard] = useState([\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null],\n//     [null, null, null, null, null, null]\n//   ]);\n//   const [values, setValues] = useState([]);\n//   useEffect(() => {\n//     const newBoard = board.map(row =>\n//       row.map(() => ({ isClicked: false, value: getRandomValue() }))\n//     );\n//     setBoard(newBoard);\n//     setValues(newBoard.flat().map(pair => pair.value));\n//   }, []);\n  \n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     const updatedBoard = [...board];\n//     updatedBoard[row][col].isClicked = !board[row][col].isClicked;\n//     setBoard(updatedBoard);\n//   };\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map(({ isClicked, value }, colIndex) => (\n//                 <Cell value={value} key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//   //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\n\n\n\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n\nconst Gameboard = () => {\n\n  //initializing driver table\n  const [board, setBoard] = useState([\n    [{ isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }],\n    [{ isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }],\n    [{ isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }],\n    [{ isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }],\n    [{ isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }],\n    [{ isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }, { isClicked: false, value: 0 }]\n  ]);\n  \n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    const newBoard = board.map(row =>\n      row.map(() => ({ isClicked: false, value: getRandomValue() }))\n    );\n    setBoard(newBoard);\n    setValues(newBoard.flat().map(pair => pair.value));\n  }, []);\n  \n  //updating values whenever user clicks on a cell\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col].isClicked = !board[row][col].isClicked;\n    setBoard(updatedBoard);\n  };\n\n    //creating memoization table for dynamic programming\n  let numRows = board.length;\n  let numCols = board[0].length;\n\nconst [memoizationTable, setMemoization] = useState([]);\n\nuseEffect(() => {\n  let numRows = board.length;\n  let numCols = board[0].length;\n\n  let memoizationTable = Array(numRows)\n    .fill()\n    .map(() => Array(numCols).fill(0));\n\n  memoizationTable[0][0] = board[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + board[row][col].value;\n    }\n  }\n  setMemoization(memoizationTable);\n}, [board]);\n\nconsole.log(memoizationTable);\n  \n  return (  \n    <div className=\"gameboard\">\n      <table>\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <Cell\n                  key={colIndex}\n                  value={cell?.value}\n                  isClicked={cell?.isClicked}\n                  onClick={() => handleClick(rowIndex, colIndex)}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Gameboard;\n\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGC,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD;AAGA,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CACjC,CAAC;IAAEe,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC,EAChM,CAAC;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC,EAChM,CAAC;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC,EAChM,CAAC;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC,EAChM,CAAC;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAAE;IAAED,SAAS,EAAE,KAAK;IAAEC,KAAK,EAAE;EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}