{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nlet previousRow = -1;\nlet previousCol = -1;\nvar start = 0;\nvar totalTime = 0;\nlet count = 0;\nconst Gameboard = props => {\n  _s();\n  function reloadComponent() {\n    window.location.reload(false);\n  }\n  let gameOver = false;\n  let win = false;\n  let currentLevel = props.level;\n  let r = currentLevel + 1;\n  let c = currentLevel + 1;\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        newDriver[i][j] = {\n          isClicked: false,\n          value: getRandomValue()\n        };\n      }\n    }\n    return newDriver;\n  });\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n  memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n  const handleClick = (row, col) => {\n    if (!gameOver) {\n      if (row - 1 == previousRow && col == previousCol || row == previousRow && col - 1 == previousCol || row == 0 && col == 0 && driver[row][col].isClicked == false) {\n        setDriver(prevDriver => {\n          count++;\n          if (count == 1) {\n            start = new Date().getTime();\n          }\n          const newDriver = [...prevDriver];\n          newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n          previousRow = row;\n          previousCol = col;\n          return newDriver;\n        });\n      }\n    }\n  };\n  let currentSum = 0;\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      if (driver[i][j].isClicked) {\n        currentSum += driver[i][j].value;\n      }\n      if (driver[r - 1][c - 1].isClicked && currentSum == targetSum) {\n        gameOver = true;\n        win = true;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time / 1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Won!\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #1aff00\";\n        document.getElementById(\"winstatus\").style.color = \"#1aff00\";\n        document.getElementById(\"endbtn\").textContent = \"Next Level\";\n      }\n      if (driver[r - 1][c - 1].isClicked && currentSum != targetSum) {\n        gameOver = true;\n        win = false;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time / 1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Lost\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #ff0000\";\n        document.getElementById(\"winstatus\").style.color = \"#ff0000\";\n        document.getElementById(\"endbtn\").textContent = \"Restart\";\n      }\n      rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n        value: driver[i][j].value,\n        isClicked: driver[i][j].isClicked,\n        onClick: () => handleClick(i, j),\n        isGameOver: gameOver,\n        winStatus: win\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this));\n    }\n    gameboardRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: rowCells\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 24\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: gameboardRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"62np00mq3lAUOPCXOC48+HeIlF8=\");\n_c = Gameboard;\nexport default Gameboard;\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n\n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","previousRow","previousCol","start","totalTime","count","Gameboard","props","_s","reloadComponent","window","location","reload","gameOver","win","currentLevel","level","r","c","driver","setDriver","newDriver","i","j","isClicked","value","memoizationTable","rowCells","push","numRows","length","numCols","row","col","val","targetSum","handleClick","prevDriver","Date","getTime","currentSum","gameboardRows","end","time","toFixed","document","getElementById","textContent","style","visibility","textShadow","color","onClick","isGameOver","winStatus","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["import { useState } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nlet previousRow = -1;\nlet previousCol = -1;\nvar start = 0;\nvar totalTime = 0;\n\nlet count = 0;\n\nconst Gameboard = (props) => {\n\n  function reloadComponent(){\n    window.location.reload(false);\n  }\n\n  let gameOver = false;\n  let win = false;\n\n  let currentLevel = props.level;\n\n  let r = currentLevel + 1;\n  let c = currentLevel + 1;\n\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        newDriver[i][j] = { isClicked: false, value: getRandomValue() };\n      }\n    }\n    return newDriver;\n  });\n\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n\n    memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n\n  const handleClick = (row, col) => {\n    if(!gameOver){\n      if((row - 1 == previousRow && col == previousCol) || (row == previousRow && col - 1 == previousCol) || ((row == 0 && col == 0) && driver[row][col].isClicked == false)){\n        setDriver(prevDriver => {\n          count++;\n          if(count == 1){\n            start = new Date().getTime();\n          }\n          const newDriver = [...prevDriver];\n          newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n          previousRow = row;\n          previousCol = col;\n          return newDriver;\n        });\n      }\n    }\n  };\n\n  let currentSum = 0;\n\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n\n      if(driver[i][j].isClicked){\n        currentSum += driver[i][j].value;\n      }\n      if(driver[r - 1][c - 1].isClicked && currentSum == targetSum){\n        gameOver = true;\n        win = true;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Won!\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #1aff00\";\n        document.getElementById(\"winstatus\").style.color = \"#1aff00\";\n        document.getElementById(\"endbtn\").textContent = \"Next Level\"\n      }\n      if(driver[r - 1][c - 1].isClicked && currentSum != targetSum){\n        gameOver = true;\n        win = false;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Lost\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #ff0000\";\n        document.getElementById(\"winstatus\").style.color = \"#ff0000\";\n        document.getElementById(\"endbtn\").textContent = \"Restart\"\n      }\n\n      rowCells.push(\n        <Cell\n          key={`${i}-${j}`}\n          value={driver[i][j].value}\n          isClicked={driver[i][j].isClicked}\n          onClick={() => handleClick(i, j)}\n          isGameOver={gameOver}\n          winStatus={win}\n        />\n      );\n    }\n    gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n  }\n\n  return (\n    <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Gameboard;\n\n\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n  \n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}