{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Cell from './Cell';\n\n//Initializing a gameboard 2D array to store values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gameboard = () => {\n  _s();\n  const [board, setBoard] = useState([[false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false]]);\n\n  //Function to handle when the user clicks a cell\n  const handleClick = (row, col) => {\n    //setting updated board equal to the current board\n    const updatedBoard = [...board];\n    //switching the chosen value\n    updatedBoard[row][col] = !board[row][col];\n    //will switch out board to the current one\n    setBoard(updatedBoard);\n  };\n\n  //Find the most efficient path\n  let numRows = board.length;\n  let numCols = board[0].length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n            isClicked: isClicked,\n            onClick: () => handleClick(rowIndex, colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"Pbje/q+1Rmq/MeS0LqznbkHwZlg=\");\n_c = Gameboard;\nexport default Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","Gameboard","_s","board","setBoard","handleClick","row","col","updatedBoard","numRows","length","numCols","className","children","map","rowIndex","isClicked","colIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["import { useState } from 'react';\nimport Cell from './Cell';\n\n//Initializing a gameboard 2D array to store values\nconst Gameboard = () => {\n  const [board, setBoard] = useState([\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n  ]);\n\n  //Function to handle when the user clicks a cell\n  const handleClick = (row, col) => {\n    //setting updated board equal to the current board\n    const updatedBoard = [...board];\n    //switching the chosen value\n    updatedBoard[row][col] = !board[row][col];\n    //will switch out board to the current one\n    setBoard(updatedBoard);\n  };\n\n  //Find the most efficient path\n  let numRows = board.length;\n  let numCols = board[0].length;\n  \n\n  return (  \n    <div className=\"gameboard\">\n      <table>\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((isClicked, colIndex) => (\n                <Cell key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n \nexport default Gameboard;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,QAAQ;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CACjC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAC1C,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAC1C,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAC1C,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAC1C,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAC1C,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAC3C,CAAC;;EAEF;EACA,MAAMQ,WAAW,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAChC;IACA,MAAMC,YAAY,GAAG,CAAC,GAAGL,KAAK,CAAC;IAC/B;IACAK,YAAY,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,CAACJ,KAAK,CAACG,GAAG,CAAC,CAACC,GAAG,CAAC;IACzC;IACAH,QAAQ,CAACI,YAAY,CAAC;EACxB,CAAC;;EAED;EACA,IAAIC,OAAO,GAAGN,KAAK,CAACO,MAAM;EAC1B,IAAIC,OAAO,GAAGR,KAAK,CAAC,CAAC,CAAC,CAACO,MAAM;EAG7B,oBACEV,OAAA;IAAKY,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBb,OAAA;MAAAa,QAAA,eACEb,OAAA;QAAAa,QAAA,EACGV,KAAK,CAACW,GAAG,CAAC,CAACR,GAAG,EAAES,QAAQ,kBACvBf,OAAA;UAAAa,QAAA,EACGP,GAAG,CAACQ,GAAG,CAAC,CAACE,SAAS,EAAEC,QAAQ,kBAC3BjB,OAAA,CAACF,IAAI;YAAgBkB,SAAS,EAAEA,SAAU;YAACE,OAAO,EAAEA,CAAA,KAAMb,WAAW,CAACU,QAAQ,EAAEE,QAAQ;UAAE,GAA/EA,QAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAyE,CAC7F;QAAC,GAHKP,QAAQ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAApB,EAAA,CAxCKD,SAAS;AAAAsB,EAAA,GAATtB,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}