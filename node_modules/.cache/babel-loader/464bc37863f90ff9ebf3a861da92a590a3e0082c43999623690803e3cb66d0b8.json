{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  let gameOver = false;\n  while (!gameOver) {\n    let r = 2;\n    let c = 2;\n    const [driver, setDriver] = useState(() => {\n      const newDriver = [];\n      for (let i = 0; i < r; i++) {\n        newDriver[i] = [];\n        for (let j = 0; j < c; j++) {\n          newDriver[i][j] = {\n            isClicked: false,\n            value: getRandomValue()\n          };\n        }\n      }\n      return newDriver;\n    });\n    const memoizationTable = [];\n    for (let i = 0; i < r; i++) {\n      const rowCells = [];\n      for (let j = 0; j < c; j++) {\n        rowCells.push(driver[i][j].value);\n      }\n      memoizationTable.push(rowCells);\n    }\n    let numRows = memoizationTable.length;\n    let numCols = memoizationTable[0].length;\n    memoizationTable[0][0] = driver[0][0].value;\n    for (let row = 1; row < numRows; row++) {\n      memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n    }\n    for (let col = 1; col < numCols; col++) {\n      memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n    }\n    for (let row = 1; row < numRows; row++) {\n      for (let col = 1; col < numCols; col++) {\n        let val = 0;\n        if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n          val = memoizationTable[row - 1][col];\n        } else {\n          val = memoizationTable[row][col - 1];\n        }\n        memoizationTable[row][col] = val + driver[row][col].value;\n      }\n    }\n    let targetSum = memoizationTable[numRows - 1][numCols - 1];\n    const handleClick = (row, col) => {\n      setDriver(prevDriver => {\n        const newDriver = [...prevDriver];\n        newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n        return newDriver;\n      });\n    };\n    let currentSum = 0;\n    const gameboardRows = [];\n    for (let i = 0; i < r; i++) {\n      const rowCells = [];\n      for (let j = 0; j < c; j++) {\n        if (driver[i][j].isClicked) {\n          currentSum += driver[i][j].value;\n        }\n        if (currentSum == targetSum) {\n          gameOver = true;\n        }\n        rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n          value: driver[i][j].value,\n          isClicked: driver[i][j].isClicked,\n          onClick: () => handleClick(i, j),\n          isGameOver: gameOver\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this));\n      }\n      gameboardRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: rowCells\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 26\n      }, this));\n    }\n    console.log(currentSum);\n    if (gameOver == true) {\n      break;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: gameboardRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"jl5yTajGTXKf8JhPfM6wx/Jjgww=\");\n_c = Gameboard;\nexport default Gameboard;\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n\n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","gameOver","r","c","driver","setDriver","newDriver","i","j","isClicked","value","memoizationTable","rowCells","push","numRows","length","numCols","row","col","val","targetSum","handleClick","prevDriver","currentSum","gameboardRows","onClick","isGameOver","fileName","_jsxFileName","lineNumber","columnNumber","children","console","log","className","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["import { useState } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n\n  let gameOver = false;\n\n  while(!gameOver){\n    let r = 2;\n    let c = 2;\n  \n    const [driver, setDriver] = useState(() => {\n      const newDriver = [];\n      for (let i = 0; i < r; i++) {\n        newDriver[i] = [];\n        for (let j = 0; j < c; j++) {\n          newDriver[i][j] = { isClicked: false, value: getRandomValue() };\n        }\n      }\n      return newDriver;\n    });\n  \n    const memoizationTable = [];\n    for (let i = 0; i < r; i++) {\n      const rowCells = [];\n      for (let j = 0; j < c; j++) {\n        rowCells.push(driver[i][j].value);\n      }\n      memoizationTable.push(rowCells);\n    }\n  \n    let numRows = memoizationTable.length;\n    let numCols = memoizationTable[0].length;\n  \n      memoizationTable[0][0] = driver[0][0].value;\n    for (let row = 1; row < numRows; row++) {\n      memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n    }\n    for (let col = 1; col < numCols; col++) {\n      memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n    }\n    for (let row = 1; row < numRows; row++) {\n      for (let col = 1; col < numCols; col++) {\n        let val = 0;\n        if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n          val = memoizationTable[row - 1][col];\n        } else {\n          val = memoizationTable[row][col - 1];\n        }\n        memoizationTable[row][col] = val + driver[row][col].value;\n      }\n    }\n  \n    let targetSum = memoizationTable[numRows - 1][numCols - 1];\n  \n    const handleClick = (row, col) => {\n      setDriver(prevDriver => {\n        const newDriver = [...prevDriver];\n        newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n        return newDriver;\n      });\n    };\n  \n    let currentSum = 0;\n  \n    const gameboardRows = [];\n    for (let i = 0; i < r; i++) {\n      const rowCells = [];\n      for (let j = 0; j < c; j++) {\n  \n        if(driver[i][j].isClicked){\n          currentSum += driver[i][j].value;\n        }\n        if(currentSum == targetSum){\n          gameOver = true;\n        }\n  \n        rowCells.push(\n          <Cell\n            key={`${i}-${j}`}\n            value={driver[i][j].value}\n            isClicked={driver[i][j].isClicked}\n            onClick={() => handleClick(i, j)}\n            isGameOver={gameOver}\n          />\n        );\n      }\n      gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n    }\n  \n    console.log(currentSum);\n  \n    if(gameOver == true){\n      break;\n    }\n  }\n\n  return (\n    <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Gameboard;\n\n\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   updateBoard();\n  \n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}