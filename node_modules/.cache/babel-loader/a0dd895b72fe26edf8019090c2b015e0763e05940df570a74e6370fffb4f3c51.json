{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  const rows = 6;\n  const cols = 6;\n  const driver = [];\n  useEffect(() => {\n    for (let i = 0; i < rows; i++) {\n      driver[i] = [];\n      for (let j = 0; j < cols; j++) {\n        driver[i][j] = {\n          isClicked: false,\n          value: getRandomValue()\n        };\n      }\n    }\n    console.log(driver);\n  }, []);\n\n  //updating values whenever user clicks on a cell\n  // const handleClick = (row, col) => {\n  //   const updatedBoard = [...board];\n  //   updatedBoard[row][col].isClicked = !board[row][col].isClicked;\n  //   setBoard(updatedBoard);\n  // };\n\n  //     //creating memoization table for dynamic programming\n  //   let numRows = board.length;\n  //   let numCols = board[0].length;\n\n  // const [memoizationTable, setMemoization] = useState([]);\n\n  // useEffect(() => {\n  //   let numRows = board.length;\n  //   let numCols = board[0].length;\n\n  //   let memoizationTable = Array(numRows)\n  //     .fill()\n  //     .map(() => Array(numCols).fill(0));\n\n  //   memoizationTable[0][0] = board[0][0].value;\n  //   for (let row = 1; row < numRows; row++) {\n  //     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n  //   }\n  //   for (let col = 1; col < numCols; col++) {\n  //     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n  //   }\n  //   for (let row = 1; row < numRows; row++) {\n  //     for (let col = 1; col < numCols; col++) {\n  //       let val = 0;\n  //       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n  //         val = memoizationTable[row - 1][col];\n  //       } else {\n  //         val = memoizationTable[row][col - 1];\n  //       }\n  //       memoizationTable[row][col] = val + board[row][col].value;\n  //     }\n  //   }\n  //   setMemoization(memoizationTable);\n  // }, [board]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Gameboard;\nexport default Gameboard;\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","useEffect","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","rows","cols","driver","i","j","isClicked","value","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n\n  const rows = 6;\n  const cols = 6;\n  const driver = [];\n\n  useEffect(() => {\n    for(let i = 0; i < rows; i++){\n      driver[i] = [];\n      for(let j = 0; j < cols; j++){\n        driver[i][j] = {isClicked: false, value: getRandomValue()};\n      }\n    }\n  \n    console.log(driver);\n  }, []);\n  \n  \n  //updating values whenever user clicks on a cell\n  // const handleClick = (row, col) => {\n  //   const updatedBoard = [...board];\n  //   updatedBoard[row][col].isClicked = !board[row][col].isClicked;\n  //   setBoard(updatedBoard);\n  // };\n\n//     //creating memoization table for dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n// const [memoizationTable, setMemoization] = useState([]);\n\n// useEffect(() => {\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   let memoizationTable = Array(numRows)\n//     .fill()\n//     .map(() => Array(numCols).fill(0));\n\n//   memoizationTable[0][0] = board[0][0].value;\n//   for (let row = 1; row < numRows; row++) {\n//     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n//   }\n//   for (let row = 1; row < numRows; row++) {\n//     for (let col = 1; col < numCols; col++) {\n//       let val = 0;\n//       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n//         val = memoizationTable[row - 1][col];\n//       } else {\n//         val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//     }\n//   }\n//   setMemoization(memoizationTable);\n// }, [board]);\n\n  \n  return (  \n    <div className=\"gameboard\">\n      <table>\n      </table>\n    </div>\n  );\n}\n\nexport default Gameboard;\n\n\n//   const [memoizationTable, setMemoization] = useState([\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0]\n//   ]);\n//   useEffect(() => {\n//     memoizationTable[0][0] = board[0][0].value;\n//     for (let row = 1; row < numRows; row++) {\n//       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n//   }\n//   for (let col = 1; col < numCols; col++) {\n//     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// }\n//     for(let row = 1; row < numRows; row++){\n//       for(let col = 1; col < numCols; col++){\n//         let val = 0;\n//         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n//           val = memoizationTable[row - 1][col];\n//       }\n//       else{\n//           val = memoizationTable[row][col - 1];\n//       }\n//       memoizationTable[row][col] = val + board[row][col].value;\n//       }\n//     }\n//   }, []);\n\n//   console.log(memoizationTable[numRows - 1][numCols - 1]);"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGC,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD;AAEA,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtB,MAAMC,IAAI,GAAG,CAAC;EACd,MAAMC,IAAI,GAAG,CAAC;EACd,MAAMC,MAAM,GAAG,EAAE;EAEjBd,SAAS,CAAC,MAAM;IACd,KAAI,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAC;MAC3BD,MAAM,CAACC,CAAC,CAAC,GAAG,EAAE;MACd,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAC;QAC3BF,MAAM,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;UAACC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAEd,cAAc,CAAC;QAAC,CAAC;MAC5D;IACF;IAEAe,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA;EACA;EACA;EACA;EACA;;EAEF;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGE,oBACEX,OAAA;IAAKkB,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBnB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAf,EAAA,CAnEKD,SAAS;AAAAiB,EAAA,GAATjB,SAAS;AAqEf,eAAeA,SAAS;;AAGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}