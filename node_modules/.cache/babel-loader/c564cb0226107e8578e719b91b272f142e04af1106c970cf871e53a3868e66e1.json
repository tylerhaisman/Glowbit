{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Game logic\n\n// const Gameboard = () => {\n\n//   const [clicked, setClicked] = useState(false);\n//   const handleClick = () => {\n//     setClicked(!clicked);\n// };\n\n//     return (  \n//         <div className=\"gameboard\">\n//         <table>\n//           <tr>\n//             <th><div className=\"bit\"></div></th>\n//             <Cell onClick={handleClick} isClicked={clicked}></Cell>\n//             <Cell></Cell>\n//             <Cell></Cell>\n//             <Cell></Cell>\n//             <Cell></Cell>\n//           </tr>\n//         </table>\n//       </div>\n//     );\n// }\n\n// export default Gameboard;\n\nimport { useState } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gameboard = () => {\n  _s();\n  const [clickedCells, setClickedCells] = useState(Array(5).fill(false));\n  const handleClick = index => {\n    const newClickedCells = [...clickedCells];\n    newClickedCells[index] = !newClickedCells[index];\n    setClickedCells(newClickedCells);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            isClicked: clickedCells[0],\n            onClick: () => handleClick(0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            isClicked: clickedCells[1],\n            onClick: () => handleClick(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            isClicked: clickedCells[2],\n            onClick: () => handleClick(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            isClicked: clickedCells[3],\n            onClick: () => handleClick(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            isClicked: clickedCells[4],\n            onClick: () => handleClick(4)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"kGAPdgINkOJAi1qy3NafSoTYnBc=\");\n_c = Gameboard;\nexport default Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","Gameboard","_s","clickedCells","setClickedCells","Array","fill","handleClick","index","newClickedCells","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isClicked","onClick","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Game logic\n\n\n// const Gameboard = () => {\n\n//   const [clicked, setClicked] = useState(false);\n//   const handleClick = () => {\n//     setClicked(!clicked);\n// };\n\n//     return (  \n//         <div className=\"gameboard\">\n//         <table>\n//           <tr>\n//             <th><div className=\"bit\"></div></th>\n//             <Cell onClick={handleClick} isClicked={clicked}></Cell>\n//             <Cell></Cell>\n//             <Cell></Cell>\n//             <Cell></Cell>\n//             <Cell></Cell>\n//           </tr>\n//         </table>\n//       </div>\n//     );\n// }\n \n// export default Gameboard;\n\nimport { useState } from 'react';\nimport Cell from './Cell';\n\nconst Gameboard = () => {\n  const [clickedCells, setClickedCells] = useState(Array(5).fill(false));\n\n  const handleClick = (index) => {\n    const newClickedCells = [...clickedCells];\n    newClickedCells[index] = !newClickedCells[index];\n    setClickedCells(newClickedCells);\n  };\n\n  return (  \n    <div className=\"gameboard\">\n      <table>\n        <tbody>\n          <tr>\n            <th><div className=\"bit\"></div></th>\n            <Cell isClicked={clickedCells[0]} onClick={() => handleClick(0)}></Cell>\n            <Cell isClicked={clickedCells[1]} onClick={() => handleClick(1)}></Cell>\n            <Cell isClicked={clickedCells[2]} onClick={() => handleClick(2)}></Cell>\n            <Cell isClicked={clickedCells[3]} onClick={() => handleClick(3)}></Cell>\n            <Cell isClicked={clickedCells[4]} onClick={() => handleClick(4)}></Cell>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n \nexport default Gameboard;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}