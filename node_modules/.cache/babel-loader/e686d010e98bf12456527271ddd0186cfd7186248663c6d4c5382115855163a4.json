{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Initializing a gameboard 2D array to store values\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   //Function to handle when the user clicks a cell\n//   const handleClick = (row, col) => {\n//     //setting updated board equal to the current board\n//     const updatedBoard = [...board];\n//     //switching the chosen value\n//     updatedBoard[row][col] = !board[row][col];\n//     //will switch out board to the current one\n//     setBoard(updatedBoard);\n//   };\n\n//   //Finding the most efficient path using dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   //creating and initializing 2D memoization table\n//   const memoizationTable = [];\n//   for (let i = 0; i < numRows; i++) {\n//     memoizationTable.push(new Array(numCols).fill(0));\n//   }\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value=\"0\" key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   const [values, setValues] = useState([]);\n\n//   // Generate and store random values for each cell when component mounts\n//   useEffect(() => {\n//     const newValues = [];\n//     for (let i = 0; i < board.length * board[0].length; i++) {\n//       newValues.push(getRandomValue());\n//     }\n//     setValues(newValues);\n//   }, []);\n\n//   const handleClick = (row, col) => {\n//     const updatedBoard = [...board];\n//     updatedBoard[row][col] = !board[row][col];\n//     setBoard(updatedBoard);\n//   };\n\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value={values[rowIndex * numCols + colIndex]} key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  const [board, setBoard] = useState([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]);\n  useEffect(() => {\n    const newBoard = board.map(row => row.map(() => [false, getRandomValue()]));\n    setBoard(newBoard);\n  }, []);\n  console.log(board);\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col] = !board[row][col];\n    setBoard(updatedBoard);\n  };\n  let numRows = board.length;\n  let numCols = board[0].length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n            value: values[rowIndex * numCols + colIndex],\n            isClicked: isClicked,\n            onClick: () => handleClick(rowIndex, colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"oge6TDi/kAeDfcXZbcIkn4mNL4U=\");\n_c = Gameboard;\nexport default Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","useEffect","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","board","setBoard","newBoard","map","row","console","log","handleClick","col","updatedBoard","numRows","length","numCols","className","children","rowIndex","isClicked","colIndex","value","values","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Initializing a gameboard 2D array to store values\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   //Function to handle when the user clicks a cell\n//   const handleClick = (row, col) => {\n//     //setting updated board equal to the current board\n//     const updatedBoard = [...board];\n//     //switching the chosen value\n//     updatedBoard[row][col] = !board[row][col];\n//     //will switch out board to the current one\n//     setBoard(updatedBoard);\n//   };\n\n//   //Finding the most efficient path using dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n  \n//   //creating and initializing 2D memoization table\n//   const memoizationTable = [];\n//   for (let i = 0; i < numRows; i++) {\n//     memoizationTable.push(new Array(numCols).fill(0));\n//   }\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value=\"0\" key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n \n// export default Gameboard;\n\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   const [values, setValues] = useState([]);\n\n//   // Generate and store random values for each cell when component mounts\n//   useEffect(() => {\n//     const newValues = [];\n//     for (let i = 0; i < board.length * board[0].length; i++) {\n//       newValues.push(getRandomValue());\n//     }\n//     setValues(newValues);\n//   }, []);\n\n//   const handleClick = (row, col) => {\n//     const updatedBoard = [...board];\n//     updatedBoard[row][col] = !board[row][col];\n//     setBoard(updatedBoard);\n//   };\n\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value={values[rowIndex * numCols + colIndex]} key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n\n\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n  const [board, setBoard] = useState([\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n  ]);\n\n  useEffect(() => {\n    const newBoard = board.map(row =>\n      row.map(() => [false, getRandomValue()])\n    );\n    setBoard(newBoard);\n  }, []);\n  \n  console.log(board);\n\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col] = !board[row][col];\n    setBoard(updatedBoard);\n  };\n\n  let numRows = board.length;\n  let numCols = board[0].length;\n\n  return (  \n    <div className=\"gameboard\">\n      <table>\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((isClicked, colIndex) => (\n                <Cell value={values[rowIndex * numCols + colIndex]} key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Gameboard;\n\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGC,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD;AAEA,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CACjC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACnB,CAAC;EAEFC,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAGF,KAAK,CAACG,GAAG,CAACC,GAAG,IAC5BA,GAAG,CAACD,GAAG,CAAC,MAAM,CAAC,KAAK,EAAEX,cAAc,CAAC,CAAC,CAAC,CACzC,CAAC;IACDS,QAAQ,CAACC,QAAQ,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAENG,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;EAElB,MAAMO,WAAW,GAAGA,CAACH,GAAG,EAAEI,GAAG,KAAK;IAChC,MAAMC,YAAY,GAAG,CAAC,GAAGT,KAAK,CAAC;IAC/BS,YAAY,CAACL,GAAG,CAAC,CAACI,GAAG,CAAC,GAAG,CAACR,KAAK,CAACI,GAAG,CAAC,CAACI,GAAG,CAAC;IACzCP,QAAQ,CAACQ,YAAY,CAAC;EACxB,CAAC;EAED,IAAIC,OAAO,GAAGV,KAAK,CAACW,MAAM;EAC1B,IAAIC,OAAO,GAAGZ,KAAK,CAAC,CAAC,CAAC,CAACW,MAAM;EAE7B,oBACEpB,OAAA;IAAKsB,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBvB,OAAA;MAAAuB,QAAA,eACEvB,OAAA;QAAAuB,QAAA,EACGd,KAAK,CAACG,GAAG,CAAC,CAACC,GAAG,EAAEW,QAAQ,kBACvBxB,OAAA;UAAAuB,QAAA,EACGV,GAAG,CAACD,GAAG,CAAC,CAACa,SAAS,EAAEC,QAAQ,kBAC3B1B,OAAA,CAACF,IAAI;YAAC6B,KAAK,EAAEC,MAAM,CAACJ,QAAQ,GAAGH,OAAO,GAAGK,QAAQ,CAAE;YAAgBD,SAAS,EAAEA,SAAU;YAACI,OAAO,EAAEA,CAAA,KAAMb,WAAW,CAACQ,QAAQ,EAAEE,QAAQ;UAAE,GAA/EA,QAAQ;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAyE,CAC3I;QAAC,GAHKT,QAAQ;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAzB,EAAA,CA3CKD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AA6Cf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}