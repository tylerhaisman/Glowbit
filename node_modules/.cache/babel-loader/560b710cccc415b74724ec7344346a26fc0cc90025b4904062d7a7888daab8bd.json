{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//     // return driver;\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n\n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   updateBoard();\n\n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n// //     //creating memoization table for dynamic programming\n// //   let numRows = board.length;\n// //   let numCols = board[0].length;\n\n// // const [memoizationTable, setMemoization] = useState([]);\n\n// // useEffect(() => {\n// //   let numRows = board.length;\n// //   let numCols = board[0].length;\n\n// //   let memoizationTable = Array(numRows)\n// //     .fill()\n// //     .map(() => Array(numCols).fill(0));\n\n// //   memoizationTable[0][0] = board[0][0].value;\n// //   for (let row = 1; row < numRows; row++) {\n// //     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n// //   }\n// //   for (let col = 1; col < numCols; col++) {\n// //     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// //   }\n// //   for (let row = 1; row < numRows; row++) {\n// //     for (let col = 1; col < numCols; col++) {\n// //       let val = 0;\n// //       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n// //         val = memoizationTable[row - 1][col];\n// //       } else {\n// //         val = memoizationTable[row][col - 1];\n// //       }\n// //       memoizationTable[row][col] = val + board[row][col].value;\n// //     }\n// //   }\n// //   setMemoization(memoizationTable);\n// // }, [board]);\n\n// //   const [memoizationTable, setMemoization] = useState([\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0]\n// //   ]);\n// //   useEffect(() => {\n// //     memoizationTable[0][0] = board[0][0].value;\n// //     for (let row = 1; row < numRows; row++) {\n// //       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n// //   }\n// //   for (let col = 1; col < numCols; col++) {\n// //     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// // }\n// //     for(let row = 1; row < numRows; row++){\n// //       for(let col = 1; col < numCols; col++){\n// //         let val = 0;\n// //         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n// //           val = memoizationTable[row - 1][col];\n// //       }\n// //       else{\n// //           val = memoizationTable[row][col - 1];\n// //       }\n// //       memoizationTable[row][col] = val + board[row][col].value;\n// //       }\n// //     }\n// //   }, []);\n\n// //   console.log(memoizationTable[numRows - 1][numCols - 1]);\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  const [driver, setDriver] = useState([]);\n  const rows = 6;\n  const cols = 6;\n  function driverInit() {\n    let tempDriver = [];\n    for (let i = 0; i < rows; i++) {\n      tempDriver[i] = [];\n      for (let j = 0; j < cols; j++) {\n        tempDriver[i][j] = {\n          isClicked: false,\n          value: getRandomValue()\n        };\n      }\n    }\n    setDriver(tempDriver);\n  }\n  const handleClick = (row, col) => {\n    let tempDriver = [...driver];\n    tempDriver[row][col].isClicked = !tempDriver[row][col].isClicked;\n    setDriver(tempDriver);\n  };\n  const gameboardRows = driver.map((row, i) => {\n    const rowCells = row.map((cell, j) => {\n      return /*#__PURE__*/_jsxDEV(Cell, {\n        value: cell.value,\n        isClicked: cell.isClicked,\n        onClick: () => handleClick(i, j)\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: rowCells\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: gameboardRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"ei7UeuRxYdmZBVtuat+ZJ5cAtow=\");\n_c = Gameboard;\nexport default Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","driver","setDriver","rows","cols","driverInit","tempDriver","i","j","isClicked","value","handleClick","row","col","gameboardRows","map","rowCells","cell","onClick","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import Cell from './Cell';\n\n// function getRandomValue() {\n//   let max = 36;\n//   let min = 1;\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const Gameboard = () => {\n\n//   const rows = 6;\n//   const cols = 6;\n//   let driver = [];\n//   driverInit();\n\n//   function driverInit(){\n//     for(let i = 0; i < rows; i++){\n//       driver[i] = [];\n//         for(let j = 0; j < cols; j++){\n//           driver[i][j] = {isClicked: false, value: getRandomValue()};\n//         }\n//     }\n//     // return driver;\n//   }\n\n//   function getDriver(){\n//     return driver;\n//   }\n\n//   let gameboardRows = [];\n//   function updateBoard(){\n//     gameboardRows = [];\n//         // create an array of rows with cells in them\n//         for (let i = 0; i < rows; i++) {\n//           const rowCells = [];\n//           for (let j = 0; j < cols; j++) {\n//             rowCells.push(\n//               <Cell\n//                 key={`${i}-${j}`}\n//                 value={getDriver()[i][j].value}\n//                 isClicked={getDriver()[i][j].isClicked}\n//                 onClick={() => handleClick(i, j)}\n//               />\n//             );\n//           }\n//           gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n//         }\n//   }\n  \n//   //updating values whenever user clicks on a cell\n//   const handleClick = (row, col) => {\n//     driver[row][col].isClicked = !driver[row][col].isClicked;\n//     updateBoard();\n//   };\n\n//   updateBoard();\n  \n//   return (\n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {gameboardRows}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\n// //     //creating memoization table for dynamic programming\n// //   let numRows = board.length;\n// //   let numCols = board[0].length;\n\n// // const [memoizationTable, setMemoization] = useState([]);\n\n// // useEffect(() => {\n// //   let numRows = board.length;\n// //   let numCols = board[0].length;\n\n// //   let memoizationTable = Array(numRows)\n// //     .fill()\n// //     .map(() => Array(numCols).fill(0));\n\n// //   memoizationTable[0][0] = board[0][0].value;\n// //   for (let row = 1; row < numRows; row++) {\n// //     memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n// //   }\n// //   for (let col = 1; col < numCols; col++) {\n// //     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// //   }\n// //   for (let row = 1; row < numRows; row++) {\n// //     for (let col = 1; col < numCols; col++) {\n// //       let val = 0;\n// //       if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n// //         val = memoizationTable[row - 1][col];\n// //       } else {\n// //         val = memoizationTable[row][col - 1];\n// //       }\n// //       memoizationTable[row][col] = val + board[row][col].value;\n// //     }\n// //   }\n// //   setMemoization(memoizationTable);\n// // }, [board]);\n\n// //   const [memoizationTable, setMemoization] = useState([\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0],\n// //     [0, 0, 0, 0, 0, 0]\n// //   ]);\n// //   useEffect(() => {\n// //     memoizationTable[0][0] = board[0][0].value;\n// //     for (let row = 1; row < numRows; row++) {\n// //       memoizationTable[row][0] = memoizationTable[row - 1][0] + board[row][0].value;\n// //   }\n// //   for (let col = 1; col < numCols; col++) {\n// //     memoizationTable[0][col] = memoizationTable[0][col - 1] + board[0][col].value;\n// // }\n// //     for(let row = 1; row < numRows; row++){\n// //       for(let col = 1; col < numCols; col++){\n// //         let val = 0;\n// //         if(memoizationTable[row - 1][col] > memoizationTable[row][col - 1]){\n// //           val = memoizationTable[row - 1][col];\n// //       }\n// //       else{\n// //           val = memoizationTable[row][col - 1];\n// //       }\n// //       memoizationTable[row][col] = val + board[row][col].value;\n// //       }\n// //     }\n// //   }, []);\n\n// //   console.log(memoizationTable[numRows - 1][numCols - 1]);\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n  const [driver, setDriver] = useState([]);\n\n  const rows = 6;\n  const cols = 6;\n\n  function driverInit() {\n    let tempDriver = [];\n    for (let i = 0; i < rows; i++) {\n      tempDriver[i] = [];\n      for (let j = 0; j < cols; j++) {\n        tempDriver[i][j] = { isClicked: false, value: getRandomValue() };\n      }\n    }\n    setDriver(tempDriver);\n  }\n\n  const handleClick = (row, col) => {\n    let tempDriver = [...driver];\n    tempDriver[row][col].isClicked = !tempDriver[row][col].isClicked;\n    setDriver(tempDriver);\n  };\n\n  const gameboardRows = driver.map((row, i) => {\n    const rowCells = row.map((cell, j) => {\n      return (\n        <Cell\n          key={`${i}-${j}`}\n          value={cell.value}\n          isClicked={cell.isClicked}\n          onClick={() => handleClick(i, j)}\n        />\n      );\n    });\n\n    return <tr key={i}>{rowCells}</tr>;\n  });\n\n  return (\n    <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Gameboard;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGC,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD;AAEA,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMc,IAAI,GAAG,CAAC;EACd,MAAMC,IAAI,GAAG,CAAC;EAEd,SAASC,UAAUA,CAAA,EAAG;IACpB,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;MAC7BD,UAAU,CAACC,CAAC,CAAC,GAAG,EAAE;MAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;QAC7BF,UAAU,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;UAAEC,SAAS,EAAE,KAAK;UAAEC,KAAK,EAAEjB,cAAc,CAAC;QAAE,CAAC;MAClE;IACF;IACAS,SAAS,CAACI,UAAU,CAAC;EACvB;EAEA,MAAMK,WAAW,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAChC,IAAIP,UAAU,GAAG,CAAC,GAAGL,MAAM,CAAC;IAC5BK,UAAU,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,CAACJ,SAAS,GAAG,CAACH,UAAU,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,CAACJ,SAAS;IAChEP,SAAS,CAACI,UAAU,CAAC;EACvB,CAAC;EAED,MAAMQ,aAAa,GAAGb,MAAM,CAACc,GAAG,CAAC,CAACH,GAAG,EAAEL,CAAC,KAAK;IAC3C,MAAMS,QAAQ,GAAGJ,GAAG,CAACG,GAAG,CAAC,CAACE,IAAI,EAAET,CAAC,KAAK;MACpC,oBACEhB,OAAA,CAACF,IAAI;QAEHoB,KAAK,EAAEO,IAAI,CAACP,KAAM;QAClBD,SAAS,EAAEQ,IAAI,CAACR,SAAU;QAC1BS,OAAO,EAAEA,CAAA,KAAMP,WAAW,CAACJ,CAAC,EAAEC,CAAC;MAAE,GAH3B,GAAED,CAAE,IAAGC,CAAE,EAAC;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIjB,CAAC;IAEN,CAAC,CAAC;IAEF,oBAAO9B,OAAA;MAAA+B,QAAA,EAAaP;IAAQ,GAAZT,CAAC;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC;EACpC,CAAC,CAAC;EAEF,oBACE9B,OAAA;IAAKgC,SAAS,EAAC,WAAW;IAAAD,QAAA,eACxB/B,OAAA;MAAA+B,QAAA,eACE/B,OAAA;QAAA+B,QAAA,EAAQT;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACtB,EAAA,CA7CID,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AA+Cf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}