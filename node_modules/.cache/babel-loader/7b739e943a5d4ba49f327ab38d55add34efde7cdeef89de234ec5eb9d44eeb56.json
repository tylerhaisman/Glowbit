{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Initializing a gameboard 2D array to store values\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   //Function to handle when the user clicks a cell\n//   const handleClick = (row, col) => {\n//     //setting updated board equal to the current board\n//     const updatedBoard = [...board];\n//     //switching the chosen value\n//     updatedBoard[row][col] = !board[row][col];\n//     //will switch out board to the current one\n//     setBoard(updatedBoard);\n//   };\n\n//   //Finding the most efficient path using dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   //creating and initializing 2D memoization table\n//   const memoizationTable = [];\n//   for (let i = 0; i < numRows; i++) {\n//     memoizationTable.push(new Array(numCols).fill(0));\n//   }\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value=\"0\" key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\nimport { useState } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  const [board, setBoard] = useState([[false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false]]);\n  const [value, setValue] = useState(0);\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col] = !board[row][col];\n    setBoard(updatedBoard);\n    setValue(getRandomValue());\n  };\n  let numRows = board.length;\n  let numCols = board[0].length;\n  const memoizationTable = [];\n  for (let i = 0; i < numRows; i++) {\n    memoizationTable.push(new Array(numCols).fill(0));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n            value: value,\n            isClicked: isClicked,\n            onClick: () => handleClick(rowIndex, colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"BzX9aGb2tB7LX6MI4+DptpS+1vc=\");\n_c = Gameboard;\nexport default Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","board","setBoard","value","setValue","handleClick","row","col","updatedBoard","numRows","length","numCols","memoizationTable","i","push","Array","fill","className","children","map","rowIndex","isClicked","colIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Initializing a gameboard 2D array to store values\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   //Function to handle when the user clicks a cell\n//   const handleClick = (row, col) => {\n//     //setting updated board equal to the current board\n//     const updatedBoard = [...board];\n//     //switching the chosen value\n//     updatedBoard[row][col] = !board[row][col];\n//     //will switch out board to the current one\n//     setBoard(updatedBoard);\n//   };\n\n//   //Finding the most efficient path using dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n  \n//   //creating and initializing 2D memoization table\n//   const memoizationTable = [];\n//   for (let i = 0; i < numRows; i++) {\n//     memoizationTable.push(new Array(numCols).fill(0));\n//   }\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value=\"0\" key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n \n// export default Gameboard;\n\nimport { useState } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n  const [board, setBoard] = useState([\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n  ]);\n\n  const [value, setValue] = useState(0);\n\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col] = !board[row][col];\n    setBoard(updatedBoard);\n    setValue(getRandomValue());\n  };\n\n  let numRows = board.length;\n  let numCols = board[0].length;\n\n  const memoizationTable = [];\n  for (let i = 0; i < numRows; i++) {\n    memoizationTable.push(new Array(numCols).fill(0));\n  }\n\n  return (  \n    <div className=\"gameboard\">\n      <table>\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((isClicked, colIndex) => (\n                <Cell value={value} key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Gameboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}