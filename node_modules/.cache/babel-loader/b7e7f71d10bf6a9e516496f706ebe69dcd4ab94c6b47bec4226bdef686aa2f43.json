{"ast":null,"code":"import _toConsumableArray from\"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import Cell from'./Cell';//initializing table values\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var previousRow=-1;var previousCol=-1;//initializing time-tracking values\nvar start=0;var totalTime=0;//initializing count of successful clicks\nvar count=0;var Gameboard=function Gameboard(props){//initializing game tracking values\nvar gameOver=false;var win=false;//initializing level value using the level prop passed into \"Gameboard\"\nvar currentLevel=props.level;if(currentLevel>8){currentLevel=8;}//initializing number of rows and columns which will each be 1 greater than the current level\nvar r=currentLevel+1;var c=currentLevel+1;//initializing the random number generator\nfunction getRandomValue(){var max=r*c;var min=1;return Math.floor(Math.random()*(max-min)+min);}//initializing the gameboard 2D array\nvar _useState=useState(function(){var newDriver=[];for(var i=0;i<r;i++){newDriver[i]=[];for(var j=0;j<c;j++){//essentially the array holds a JavaScript object with three key-value pairs\nnewDriver[i][j]={isClicked:false,value:getRandomValue(),canBe:false};}}//setting that the first node in the upper left can be clicked\nnewDriver[0][0].canBe=true;return newDriver;}),_useState2=_slicedToArray(_useState,2),driver=_useState2[0],setDriver=_useState2[1];//initializing memoization table for solution computation\nvar memoizationTable=[];for(var i=0;i<r;i++){var rowCells=[];for(var j=0;j<c;j++){rowCells.push(driver[i][j].value);}memoizationTable.push(rowCells);}var numRows=memoizationTable.length;var numCols=memoizationTable[0].length;//calculating the global solution using the values from the memoization table\nmemoizationTable[0][0]=driver[0][0].value;for(var row=1;row<numRows;row++){memoizationTable[row][0]=memoizationTable[row-1][0]+driver[row][0].value;}for(var col=1;col<numCols;col++){memoizationTable[0][col]=memoizationTable[0][col-1]+driver[0][col].value;}for(var _row=1;_row<numRows;_row++){for(var _col=1;_col<numCols;_col++){var val=0;if(memoizationTable[_row-1][_col]>memoizationTable[_row][_col-1]){val=memoizationTable[_row-1][_col];}else{val=memoizationTable[_row][_col-1];}memoizationTable[_row][_col]=val+driver[_row][_col].value;}}//target sum == the number in the lower right-hand corner of the memoization table\nvar targetSum=memoizationTable[numRows-1][numCols-1];//function that runs every time a user clicks on a table cell\nvar handleClick=function handleClick(row,col){if(!gameOver){//checking to see if the cell \"can\" be clicked (must be to the immediate right of the previous cell or immediately beneath)\nif(row-1==previousRow&&col==previousCol||row==previousRow&&col-1==previousCol||row==0&&col==0&&driver[row][col].isClicked==false){setDriver(function(prevDriver){count++;if(count==1){//running stopwatch to track execution time\nstart=new Date().getTime();}var newDriver=_toConsumableArray(prevDriver);//setting the cell that was clicked to true\nnewDriver[row][col].isClicked=!newDriver[row][col].isClicked;//checking to see if the next cells that can be clicked are in bounds\nif(row+1<newDriver.length){//setting can be clicked to true\nnewDriver[row+1][col].canBe=true;}if(col+1<newDriver.length){//setting can be clicked to true\nnewDriver[row][col+1].canBe=true;}//updating the current cell so it can no longer be \"clicked\" as well as the other cell that may have been set to true\nnewDriver[row][col].canBe=false;if(row-1>=0&&col+1<newDriver[0].length){newDriver[row-1][col+1].canBe=false;}if(col-1>=0&&row+1<newDriver.length){newDriver[row+1][col-1].canBe=false;}//updating previousRow and previousCol\npreviousRow=row;previousCol=col;return newDriver;});}}};//summing the currently isClicked nodes\nvar currentSum=0;var gameboardRows=[];var _loop=function _loop(_i){var rowCells=[];var _loop2=function _loop2(_j2){if(driver[_i][_j2].isClicked){currentSum+=driver[_i][_j2].value;}//if the sum of all clicked nodes is equal to the target sum and the game is over, player wins\nif(driver[r-1][c-1].isClicked&&currentSum==targetSum){gameOver=true;win=true;end=new Date().getTime();time=end-start;totalTime=(time/1000).toFixed(2);document.getElementById(\"time\").textContent=\"Your Time: \"+totalTime+\"s\";document.getElementById(\"gameover\").textContent=\"Game Over\";document.getElementById(\"aftergame\").style.visibility=\"visible\";document.getElementById(\"winstatus\").textContent=\"You Won!\";document.getElementById(\"winstatus\").style.textShadow=\"0 0 40px #1aff00\";document.getElementById(\"winstatus\").style.color=\"#1aff00\";document.getElementById(\"endbtn\").textContent=\"Next Level\";}//if the sum of all clicked nodes is not equal to the target sum and the game is over, player loses\nif(driver[r-1][c-1].isClicked&&currentSum!=targetSum){gameOver=true;win=false;end=new Date().getTime();time=end-start;totalTime=(time/1000).toFixed(2);document.getElementById(\"time\").textContent=\"Your Time: \"+totalTime+\"s\";document.getElementById(\"gameover\").textContent=\"Game Over\";document.getElementById(\"aftergame\").style.visibility=\"visible\";document.getElementById(\"winstatus\").textContent=\"You Lost\";document.getElementById(\"winstatus\").style.textShadow=\"0 0 40px #ff0000\";document.getElementById(\"winstatus\").style.color=\"#ff0000\";document.getElementById(\"endbtn\").textContent=\"Play Again\";}//pushing all cells to the row\nrowCells.push(/*#__PURE__*/_jsx(Cell,{value:driver[_i][_j2].value,isClicked:driver[_i][_j2].isClicked,onClick:function onClick(){return handleClick(_i,_j2);},isGameOver:gameOver,winStatus:win,canBeClicked:driver[_i][_j2].canBe},\"\".concat(_i,\"-\").concat(_j2)));};for(var _j2=0;_j2<c;_j2++){_loop2(_j2);}//pushing all rows to the gameboard\ngameboardRows.push(/*#__PURE__*/_jsx(\"tr\",{children:rowCells},_i));};for(var _i=0;_i<r;_i++){var end,time,end,time;_loop(_i);}//resetting the gameboard after the user clicks a button (\"Next Level\" or \"Play Again\")\nvar handleReset=function handleReset(){if(!win){window.location.reload();}else{props.resetGame();previousRow=-1;previousCol=-1;start=0;totalTime=0;count=0;currentSum=0;gameOver=false;win=false;setDriver(function(prevDriver){currentLevel++;r=currentLevel+1;c=currentLevel+1;var newDriver=[];for(var _i2=0;_i2<r;_i2++){newDriver[_i2]=[];for(var _j=0;_j<c;_j++){newDriver[_i2][_j]={isClicked:false,value:getRandomValue()};}}newDriver[0][0].canBe=true;return newDriver;});document.getElementById(\"aftergame\").style.visibility=\"hidden\";}};// const handleRefresh = () => {\n//   window.location.reload();\n// };\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"gameboard\",children:[/*#__PURE__*/_jsx(\"table\",{children:/*#__PURE__*/_jsx(\"tbody\",{children:gameboardRows})}),/*#__PURE__*/_jsxs(\"div\",{id:\"aftergame\",className:\"gameover\",children:[/*#__PURE__*/_jsx(\"h1\",{id:\"gameover\"}),/*#__PURE__*/_jsx(\"h2\",{id:\"winstatus\"}),/*#__PURE__*/_jsx(\"div\",{className:\"runtime\",children:/*#__PURE__*/_jsx(\"p\",{id:\"time\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"buttons\",className:\"buttons\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleReset,id:\"endbtn\",children:\"Next Level\"})})]})]});};export default Gameboard;","map":{"version":3,"names":["useState","Cell","jsx","_jsx","jsxs","_jsxs","previousRow","previousCol","start","totalTime","count","Gameboard","props","gameOver","win","currentLevel","level","r","c","getRandomValue","max","min","Math","floor","random","_useState","newDriver","i","j","isClicked","value","canBe","_useState2","_slicedToArray","driver","setDriver","memoizationTable","rowCells","push","numRows","length","numCols","row","col","val","targetSum","handleClick","prevDriver","Date","getTime","_toConsumableArray","currentSum","gameboardRows","_loop","_i","_loop2","_j2","end","time","toFixed","document","getElementById","textContent","style","visibility","textShadow","color","onClick","isGameOver","winStatus","canBeClicked","concat","children","handleReset","window","location","reload","resetGame","className","id"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/Gameboard.js"],"sourcesContent":["import { useState } from 'react';\n\nimport Cell from './Cell';\n\n//initializing table values\nlet previousRow = -1;\nlet previousCol = -1;\n\n//initializing time-tracking values\nvar start = 0;\nvar totalTime = 0;\n\n//initializing count of successful clicks\nlet count = 0;\n\nconst Gameboard = (props) => {\n\n  //initializing game tracking values\n  let gameOver = false;\n  let win = false;\n\n  //initializing level value using the level prop passed into \"Gameboard\"\n  let currentLevel = props.level;\n  if(currentLevel > 8){\n    currentLevel = 8;\n  }\n\n  //initializing number of rows and columns which will each be 1 greater than the current level\n  let r = currentLevel + 1;\n  let c = currentLevel + 1;\n\n  //initializing the random number generator\n  function getRandomValue() {\n    let max = r * c;\n    let min = 1;\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  //initializing the gameboard 2D array\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        //essentially the array holds a JavaScript object with three key-value pairs\n        newDriver[i][j] = { isClicked: false, value: getRandomValue(), canBe: false };\n      }\n    }\n    //setting that the first node in the upper left can be clicked\n    newDriver[0][0].canBe = true;\n    return newDriver;\n  });\n\n  //initializing memoization table for solution computation\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n\n  //calculating the global solution using the values from the memoization table\n    memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n\n  //target sum == the number in the lower right-hand corner of the memoization table\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n\n  //function that runs every time a user clicks on a table cell\n  const handleClick = (row, col) => {\n    if(!gameOver){\n      //checking to see if the cell \"can\" be clicked (must be to the immediate right of the previous cell or immediately beneath)\n      if((row - 1 == previousRow && col == previousCol) || (row == previousRow && col - 1 == previousCol) || ((row == 0 && col == 0) && driver[row][col].isClicked == false)){\n        setDriver(prevDriver => {\n          count++;\n          if(count == 1){\n            //running stopwatch to track execution time\n            start = new Date().getTime();\n          }\n          const newDriver = [...prevDriver];\n\n          //setting the cell that was clicked to true\n          newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n\n          //checking to see if the next cells that can be clicked are in bounds\n          if(row + 1 < newDriver.length){\n            //setting can be clicked to true\n            newDriver[row + 1][col].canBe = true;\n          }\n          if(col + 1 < newDriver.length){\n            //setting can be clicked to true\n            newDriver[row][col + 1].canBe = true;\n          }\n          //updating the current cell so it can no longer be \"clicked\" as well as the other cell that may have been set to true\n          newDriver[row][col].canBe = false;\n          if((row - 1 >= 0) && (col + 1 < newDriver[0].length)){\n            newDriver[row - 1][col + 1].canBe = false;\n          }\n          if((col - 1 >= 0) && (row + 1 < newDriver.length)){\n            newDriver[row + 1][col - 1].canBe = false;\n          }\n\n          //updating previousRow and previousCol\n          previousRow = row;\n          previousCol = col;\n\n          return newDriver;\n        });\n      }\n    }\n  };\n\n  //summing the currently isClicked nodes\n  let currentSum = 0;\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      if(driver[i][j].isClicked){\n        currentSum += driver[i][j].value;\n      }\n      //if the sum of all clicked nodes is equal to the target sum and the game is over, player wins\n      if(driver[r - 1][c - 1].isClicked && currentSum == targetSum){\n        gameOver = true;\n        win = true;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Won!\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #1aff00\";\n        document.getElementById(\"winstatus\").style.color = \"#1aff00\";\n        document.getElementById(\"endbtn\").textContent = \"Next Level\";\n      }\n      //if the sum of all clicked nodes is not equal to the target sum and the game is over, player loses\n      if(driver[r - 1][c - 1].isClicked && currentSum != targetSum){\n        gameOver = true;\n        win = false;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Lost\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #ff0000\";\n        document.getElementById(\"winstatus\").style.color = \"#ff0000\";\n        document.getElementById(\"endbtn\").textContent = \"Play Again\";\n      }\n      //pushing all cells to the row\n      rowCells.push(\n        <Cell\n          key={`${i}-${j}`}\n          value={driver[i][j].value}\n          isClicked={driver[i][j].isClicked}\n          onClick={() => handleClick(i, j)}\n          isGameOver={gameOver}\n          winStatus={win}\n          canBeClicked={driver[i][j].canBe}\n        />\n      );\n    }\n    //pushing all rows to the gameboard\n    gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n  }\n\n  //resetting the gameboard after the user clicks a button (\"Next Level\" or \"Play Again\")\n  const handleReset = () => {\n    if(!win){\n      window.location.reload();\n    }\n    else{\n      props.resetGame();\n\n      previousRow = -1;\n      previousCol = -1;\n      start = 0;\n      totalTime = 0;\n      count = 0;\n      currentSum = 0;\n  \n      gameOver = false;\n      win = false;\n  \n      setDriver(prevDriver => {\n  \n        currentLevel++;\n  \n        r = currentLevel + 1;\n        c = currentLevel + 1;\n  \n        const newDriver = [];\n      for (let i = 0; i < r; i++) {\n        newDriver[i] = [];\n        for (let j = 0; j < c; j++) {\n          newDriver[i][j] = { isClicked: false, value: getRandomValue() };\n        }\n      }\n      newDriver[0][0].canBe = true;\n      return newDriver;\n      });  \n      document.getElementById(\"aftergame\").style.visibility = \"hidden\";\n    }\n  };\n\n  // const handleRefresh = () => {\n  //   window.location.reload();\n  // };\n\n  return (\n          <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n      <div id=\"aftergame\" className=\"gameover\">\n            <h1 id=\"gameover\"></h1>\n            <h2 id=\"winstatus\"></h2>\n            <div className=\"runtime\">\n            <p id=\"time\"></p>\n          </div>\n          <div id=\"buttons\" className=\"buttons\">\n            <button onClick={handleReset} id=\"endbtn\">Next Level</button>\n          </div>\n          </div>\n    </div>\n  );\n};\n\nexport default Gameboard;"],"mappings":"0WAAA,OAASA,QAAQ,KAAQ,OAAO,CAEhC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CAEzB;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACA,GAAI,CAAAC,WAAW,CAAG,CAAC,CAAC,CACpB,GAAI,CAAAC,WAAW,CAAG,CAAC,CAAC,CAEpB;AACA,GAAI,CAAAC,KAAK,CAAG,CAAC,CACb,GAAI,CAAAC,SAAS,CAAG,CAAC,CAEjB;AACA,GAAI,CAAAC,KAAK,CAAG,CAAC,CAEb,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,KAAK,CAAK,CAE3B;AACA,GAAI,CAAAC,QAAQ,CAAG,KAAK,CACpB,GAAI,CAAAC,GAAG,CAAG,KAAK,CAEf;AACA,GAAI,CAAAC,YAAY,CAAGH,KAAK,CAACI,KAAK,CAC9B,GAAGD,YAAY,CAAG,CAAC,CAAC,CAClBA,YAAY,CAAG,CAAC,CAClB,CAEA;AACA,GAAI,CAAAE,CAAC,CAAGF,YAAY,CAAG,CAAC,CACxB,GAAI,CAAAG,CAAC,CAAGH,YAAY,CAAG,CAAC,CAExB;AACA,QAAS,CAAAI,cAAcA,CAAA,CAAG,CACxB,GAAI,CAAAC,GAAG,CAAGH,CAAC,CAAGC,CAAC,CACf,GAAI,CAAAG,GAAG,CAAG,CAAC,CACX,MAAO,CAAAC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,EAAIJ,GAAG,CAAGC,GAAG,CAAC,CAAGA,GAAG,CAAC,CACtD,CAEA;AACA,IAAAI,SAAA,CAA4BzB,QAAQ,CAAC,UAAM,CACzC,GAAM,CAAA0B,SAAS,CAAG,EAAE,CACpB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,CAAC,CAAEU,CAAC,EAAE,CAAE,CAC1BD,SAAS,CAACC,CAAC,CAAC,CAAG,EAAE,CACjB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,CAAC,CAAEU,CAAC,EAAE,CAAE,CAC1B;AACAF,SAAS,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAAG,CAAEC,SAAS,CAAE,KAAK,CAAEC,KAAK,CAAEX,cAAc,CAAC,CAAC,CAAEY,KAAK,CAAE,KAAM,CAAC,CAC/E,CACF,CACA;AACAL,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,KAAK,CAAG,IAAI,CAC5B,MAAO,CAAAL,SAAS,CAClB,CAAC,CAAC,CAAAM,UAAA,CAAAC,cAAA,CAAAR,SAAA,IAZKS,MAAM,CAAAF,UAAA,IAAEG,SAAS,CAAAH,UAAA,IAcxB;AACA,GAAM,CAAAI,gBAAgB,CAAG,EAAE,CAC3B,IAAK,GAAI,CAAAT,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,CAAC,CAAEU,CAAC,EAAE,CAAE,CAC1B,GAAM,CAAAU,QAAQ,CAAG,EAAE,CACnB,IAAK,GAAI,CAAAT,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,CAAC,CAAEU,CAAC,EAAE,CAAE,CAC1BS,QAAQ,CAACC,IAAI,CAACJ,MAAM,CAACP,CAAC,CAAC,CAACC,CAAC,CAAC,CAACE,KAAK,CAAC,CACnC,CACAM,gBAAgB,CAACE,IAAI,CAACD,QAAQ,CAAC,CACjC,CAEA,GAAI,CAAAE,OAAO,CAAGH,gBAAgB,CAACI,MAAM,CACrC,GAAI,CAAAC,OAAO,CAAGL,gBAAgB,CAAC,CAAC,CAAC,CAACI,MAAM,CAExC;AACEJ,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACJ,KAAK,CAC7C,IAAK,GAAI,CAAAY,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAGH,OAAO,CAAEG,GAAG,EAAE,CAAE,CACtCN,gBAAgB,CAACM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAGN,gBAAgB,CAACM,GAAG,CAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGR,MAAM,CAACQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAACZ,KAAK,CAChF,CACA,IAAK,GAAI,CAAAa,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAGF,OAAO,CAAEE,GAAG,EAAE,CAAE,CACtCP,gBAAgB,CAAC,CAAC,CAAC,CAACO,GAAG,CAAC,CAAGP,gBAAgB,CAAC,CAAC,CAAC,CAACO,GAAG,CAAG,CAAC,CAAC,CAAGT,MAAM,CAAC,CAAC,CAAC,CAACS,GAAG,CAAC,CAACb,KAAK,CAChF,CACA,IAAK,GAAI,CAAAY,IAAG,CAAG,CAAC,CAAEA,IAAG,CAAGH,OAAO,CAAEG,IAAG,EAAE,CAAE,CACtC,IAAK,GAAI,CAAAC,IAAG,CAAG,CAAC,CAAEA,IAAG,CAAGF,OAAO,CAAEE,IAAG,EAAE,CAAE,CACtC,GAAI,CAAAC,GAAG,CAAG,CAAC,CACX,GAAIR,gBAAgB,CAACM,IAAG,CAAG,CAAC,CAAC,CAACC,IAAG,CAAC,CAAGP,gBAAgB,CAACM,IAAG,CAAC,CAACC,IAAG,CAAG,CAAC,CAAC,CAAE,CACnEC,GAAG,CAAGR,gBAAgB,CAACM,IAAG,CAAG,CAAC,CAAC,CAACC,IAAG,CAAC,CACtC,CAAC,IAAM,CACLC,GAAG,CAAGR,gBAAgB,CAACM,IAAG,CAAC,CAACC,IAAG,CAAG,CAAC,CAAC,CACtC,CACAP,gBAAgB,CAACM,IAAG,CAAC,CAACC,IAAG,CAAC,CAAGC,GAAG,CAAGV,MAAM,CAACQ,IAAG,CAAC,CAACC,IAAG,CAAC,CAACb,KAAK,CAC3D,CACF,CAEA;AACA,GAAI,CAAAe,SAAS,CAAGT,gBAAgB,CAACG,OAAO,CAAG,CAAC,CAAC,CAACE,OAAO,CAAG,CAAC,CAAC,CAE1D;AACA,GAAM,CAAAK,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIJ,GAAG,CAAEC,GAAG,CAAK,CAChC,GAAG,CAAC9B,QAAQ,CAAC,CACX;AACA,GAAI6B,GAAG,CAAG,CAAC,EAAIpC,WAAW,EAAIqC,GAAG,EAAIpC,WAAW,EAAMmC,GAAG,EAAIpC,WAAW,EAAIqC,GAAG,CAAG,CAAC,EAAIpC,WAAY,EAAMmC,GAAG,EAAI,CAAC,EAAIC,GAAG,EAAI,CAAC,EAAKT,MAAM,CAACQ,GAAG,CAAC,CAACC,GAAG,CAAC,CAACd,SAAS,EAAI,KAAM,CAAC,CACrKM,SAAS,CAAC,SAAAY,UAAU,CAAI,CACtBrC,KAAK,EAAE,CACP,GAAGA,KAAK,EAAI,CAAC,CAAC,CACZ;AACAF,KAAK,CAAG,GAAI,CAAAwC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAC9B,CACA,GAAM,CAAAvB,SAAS,CAAAwB,kBAAA,CAAOH,UAAU,CAAC,CAEjC;AACArB,SAAS,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC,CAACd,SAAS,CAAG,CAACH,SAAS,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC,CAACd,SAAS,CAE9D;AACA,GAAGa,GAAG,CAAG,CAAC,CAAGhB,SAAS,CAACc,MAAM,CAAC,CAC5B;AACAd,SAAS,CAACgB,GAAG,CAAG,CAAC,CAAC,CAACC,GAAG,CAAC,CAACZ,KAAK,CAAG,IAAI,CACtC,CACA,GAAGY,GAAG,CAAG,CAAC,CAAGjB,SAAS,CAACc,MAAM,CAAC,CAC5B;AACAd,SAAS,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAG,CAAC,CAAC,CAACZ,KAAK,CAAG,IAAI,CACtC,CACA;AACAL,SAAS,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC,CAACZ,KAAK,CAAG,KAAK,CACjC,GAAIW,GAAG,CAAG,CAAC,EAAI,CAAC,EAAMC,GAAG,CAAG,CAAC,CAAGjB,SAAS,CAAC,CAAC,CAAC,CAACc,MAAO,CAAC,CACnDd,SAAS,CAACgB,GAAG,CAAG,CAAC,CAAC,CAACC,GAAG,CAAG,CAAC,CAAC,CAACZ,KAAK,CAAG,KAAK,CAC3C,CACA,GAAIY,GAAG,CAAG,CAAC,EAAI,CAAC,EAAMD,GAAG,CAAG,CAAC,CAAGhB,SAAS,CAACc,MAAO,CAAC,CAChDd,SAAS,CAACgB,GAAG,CAAG,CAAC,CAAC,CAACC,GAAG,CAAG,CAAC,CAAC,CAACZ,KAAK,CAAG,KAAK,CAC3C,CAEA;AACAzB,WAAW,CAAGoC,GAAG,CACjBnC,WAAW,CAAGoC,GAAG,CAEjB,MAAO,CAAAjB,SAAS,CAClB,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAED;AACA,GAAI,CAAAyB,UAAU,CAAG,CAAC,CAClB,GAAM,CAAAC,aAAa,CAAG,EAAE,CAAC,IAAAC,KAAA,UAAAA,MAAAC,EAAA,CACG,CAC1B,GAAM,CAAAjB,QAAQ,CAAG,EAAE,CAAC,IAAAkB,MAAA,UAAAA,OAAAC,GAAA,CACQ,CAC1B,GAAGtB,MAAM,CAACP,EAAC,CAAC,CAACC,GAAC,CAAC,CAACC,SAAS,CAAC,CACxBsB,UAAU,EAAIjB,MAAM,CAACP,EAAC,CAAC,CAACC,GAAC,CAAC,CAACE,KAAK,CAClC,CACA;AACA,GAAGI,MAAM,CAACjB,CAAC,CAAG,CAAC,CAAC,CAACC,CAAC,CAAG,CAAC,CAAC,CAACW,SAAS,EAAIsB,UAAU,EAAIN,SAAS,CAAC,CAC3DhC,QAAQ,CAAG,IAAI,CACfC,GAAG,CAAG,IAAI,CACN2C,GAAG,CAAG,GAAI,CAAAT,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAC1BS,IAAI,CAAGD,GAAG,CAAGjD,KAAK,CACtBC,SAAS,CAAG,CAACiD,IAAI,CAAC,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,CAClCC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,WAAW,CAAG,aAAa,CAAGrD,SAAS,CAAG,GAAG,CAC7EmD,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,WAAW,CAAG,WAAW,CAC7DF,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACE,KAAK,CAACC,UAAU,CAAG,SAAS,CACjEJ,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,WAAW,CAAG,UAAU,CAC7DF,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACE,KAAK,CAACE,UAAU,CAAG,kBAAkB,CAC1EL,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACE,KAAK,CAACG,KAAK,CAAG,SAAS,CAC5DN,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACC,WAAW,CAAG,YAAY,CAC9D,CACA;AACA,GAAG5B,MAAM,CAACjB,CAAC,CAAG,CAAC,CAAC,CAACC,CAAC,CAAG,CAAC,CAAC,CAACW,SAAS,EAAIsB,UAAU,EAAIN,SAAS,CAAC,CAC3DhC,QAAQ,CAAG,IAAI,CACfC,GAAG,CAAG,KAAK,CACP2C,GAAG,CAAG,GAAI,CAAAT,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAC1BS,IAAI,CAAGD,GAAG,CAAGjD,KAAK,CACtBC,SAAS,CAAG,CAACiD,IAAI,CAAC,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,CAClCC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,WAAW,CAAG,aAAa,CAAGrD,SAAS,CAAG,GAAG,CAC7EmD,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,WAAW,CAAG,WAAW,CAC7DF,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACE,KAAK,CAACC,UAAU,CAAG,SAAS,CACjEJ,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,WAAW,CAAG,UAAU,CAC7DF,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACE,KAAK,CAACE,UAAU,CAAG,kBAAkB,CAC1EL,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACE,KAAK,CAACG,KAAK,CAAG,SAAS,CAC5DN,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACC,WAAW,CAAG,YAAY,CAC9D,CACA;AACAzB,QAAQ,CAACC,IAAI,cACXnC,IAAA,CAACF,IAAI,EAEH6B,KAAK,CAAEI,MAAM,CAACP,EAAC,CAAC,CAACC,GAAC,CAAC,CAACE,KAAM,CAC1BD,SAAS,CAAEK,MAAM,CAACP,EAAC,CAAC,CAACC,GAAC,CAAC,CAACC,SAAU,CAClCsC,OAAO,CAAE,SAAAA,QAAA,QAAM,CAAArB,WAAW,CAACnB,EAAC,CAAEC,GAAC,CAAC,EAAC,CACjCwC,UAAU,CAAEvD,QAAS,CACrBwD,SAAS,CAAEvD,GAAI,CACfwD,YAAY,CAAEpC,MAAM,CAACP,EAAC,CAAC,CAACC,GAAC,CAAC,CAACG,KAAM,KAAAwC,MAAA,CANzB5C,EAAC,MAAA4C,MAAA,CAAI3C,GAAC,CAOf,CACH,CAAC,CACH,CAAC,CA9CD,IAAK,GAAI,CAAAA,GAAC,CAAG,CAAC,CAAEA,GAAC,CAAGV,CAAC,CAAEU,GAAC,EAAE,EAAA2B,MAAA,CAAAC,GAAA,GA+C1B;AACAJ,aAAa,CAACd,IAAI,cAACnC,IAAA,OAAAqE,QAAA,CAAanC,QAAQ,EAAZV,EAAiB,CAAC,CAAC,CACjD,CAAC,CAnDD,IAAK,GAAI,CAAAA,EAAC,CAAG,CAAC,CAAEA,EAAC,CAAGV,CAAC,CAAEU,EAAC,EAAE,MAAA8B,GAAA,CAAAC,IAAA,CAAAD,GAAA,CAAAC,IAAA,CAAAL,KAAA,CAAAC,EAAA,GAqD1B;AACA,GAAM,CAAAmB,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAS,CACxB,GAAG,CAAC3D,GAAG,CAAC,CACN4D,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAC1B,CAAC,IACG,CACFhE,KAAK,CAACiE,SAAS,CAAC,CAAC,CAEjBvE,WAAW,CAAG,CAAC,CAAC,CAChBC,WAAW,CAAG,CAAC,CAAC,CAChBC,KAAK,CAAG,CAAC,CACTC,SAAS,CAAG,CAAC,CACbC,KAAK,CAAG,CAAC,CACTyC,UAAU,CAAG,CAAC,CAEdtC,QAAQ,CAAG,KAAK,CAChBC,GAAG,CAAG,KAAK,CAEXqB,SAAS,CAAC,SAAAY,UAAU,CAAI,CAEtBhC,YAAY,EAAE,CAEdE,CAAC,CAAGF,YAAY,CAAG,CAAC,CACpBG,CAAC,CAAGH,YAAY,CAAG,CAAC,CAEpB,GAAM,CAAAW,SAAS,CAAG,EAAE,CACtB,IAAK,GAAI,CAAAC,GAAC,CAAG,CAAC,CAAEA,GAAC,CAAGV,CAAC,CAAEU,GAAC,EAAE,CAAE,CAC1BD,SAAS,CAACC,GAAC,CAAC,CAAG,EAAE,CACjB,IAAK,GAAI,CAAAC,EAAC,CAAG,CAAC,CAAEA,EAAC,CAAGV,CAAC,CAAEU,EAAC,EAAE,CAAE,CAC1BF,SAAS,CAACC,GAAC,CAAC,CAACC,EAAC,CAAC,CAAG,CAAEC,SAAS,CAAE,KAAK,CAAEC,KAAK,CAAEX,cAAc,CAAC,CAAE,CAAC,CACjE,CACF,CACAO,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,KAAK,CAAG,IAAI,CAC5B,MAAO,CAAAL,SAAS,CAChB,CAAC,CAAC,CACFkC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACE,KAAK,CAACC,UAAU,CAAG,QAAQ,CAClE,CACF,CAAC,CAED;AACA;AACA;AAEA,mBACQ3D,KAAA,QAAKyE,SAAS,CAAC,WAAW,CAAAN,QAAA,eAC9BrE,IAAA,UAAAqE,QAAA,cACErE,IAAA,UAAAqE,QAAA,CAAQpB,aAAa,CAAQ,CAAC,CACzB,CAAC,cACR/C,KAAA,QAAK0E,EAAE,CAAC,WAAW,CAACD,SAAS,CAAC,UAAU,CAAAN,QAAA,eAClCrE,IAAA,OAAI4E,EAAE,CAAC,UAAU,CAAK,CAAC,cACvB5E,IAAA,OAAI4E,EAAE,CAAC,WAAW,CAAK,CAAC,cACxB5E,IAAA,QAAK2E,SAAS,CAAC,SAAS,CAAAN,QAAA,cACxBrE,IAAA,MAAG4E,EAAE,CAAC,MAAM,CAAI,CAAC,CACd,CAAC,cACN5E,IAAA,QAAK4E,EAAE,CAAC,SAAS,CAACD,SAAS,CAAC,SAAS,CAAAN,QAAA,cACnCrE,IAAA,WAAQgE,OAAO,CAAEM,WAAY,CAACM,EAAE,CAAC,QAAQ,CAAAP,QAAA,CAAC,YAAU,CAAQ,CAAC,CAC1D,CAAC,EACD,CAAC,EACP,CAAC,CAEV,CAAC,CAED,cAAe,CAAA7D,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}