{"ast":null,"code":"var _jsxFileName = \"/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Initializing a gameboard 2D array to store values\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   //Function to handle when the user clicks a cell\n//   const handleClick = (row, col) => {\n//     //setting updated board equal to the current board\n//     const updatedBoard = [...board];\n//     //switching the chosen value\n//     updatedBoard[row][col] = !board[row][col];\n//     //will switch out board to the current one\n//     setBoard(updatedBoard);\n//   };\n\n//   //Finding the most efficient path using dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n\n//   //creating and initializing 2D memoization table\n//   const memoizationTable = [];\n//   for (let i = 0; i < numRows; i++) {\n//     memoizationTable.push(new Array(numCols).fill(0));\n//   }\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value=\"0\" key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default Gameboard;\n\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\nconst Gameboard = () => {\n  _s();\n  const [board, setBoard] = useState([[false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false], [false, false, false, false, false, false]]);\n  const [values, setValues] = useState([]);\n\n  // Generate and store random values for each cell when component mounts\n  useEffect(() => {\n    const newValues = [];\n    for (let i = 0; i < board.length * board[0].length; i++) {\n      newValues.push(getRandomValue());\n    }\n    setValues(newValues);\n  }, []);\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col] = !board[row][col];\n    setBoard(updatedBoard);\n  };\n  let numRows = board.length;\n  let numCols = board[0].length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n            value: values[rowIndex * numCols + colIndex],\n            isClicked: isClicked,\n            onClick: () => handleClick(rowIndex, colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"rVvpscoApqxpDJ4f/b9AcZe3SEA=\");\n_c = Gameboard;\nexport default Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useState","useEffect","Cell","jsxDEV","_jsxDEV","getRandomValue","max","min","Math","floor","random","Gameboard","_s","board","setBoard","values","setValues","newValues","i","length","push","handleClick","row","col","updatedBoard","numRows","numCols","className","children","map","rowIndex","isClicked","colIndex","value","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/TylerHaisman/OneDrive/Coding Projects/Web Development/Glowbit/glowbit/src/Gameboard.js"],"sourcesContent":["// import { useState } from 'react';\n// import Cell from './Cell';\n\n// //Initializing a gameboard 2D array to store values\n// const Gameboard = () => {\n//   const [board, setBoard] = useState([\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//     [false, false, false, false, false, false],\n//   ]);\n\n//   //Function to handle when the user clicks a cell\n//   const handleClick = (row, col) => {\n//     //setting updated board equal to the current board\n//     const updatedBoard = [...board];\n//     //switching the chosen value\n//     updatedBoard[row][col] = !board[row][col];\n//     //will switch out board to the current one\n//     setBoard(updatedBoard);\n//   };\n\n//   //Finding the most efficient path using dynamic programming\n//   let numRows = board.length;\n//   let numCols = board[0].length;\n  \n//   //creating and initializing 2D memoization table\n//   const memoizationTable = [];\n//   for (let i = 0; i < numRows; i++) {\n//     memoizationTable.push(new Array(numCols).fill(0));\n//   }\n\n//   return (  \n//     <div className=\"gameboard\">\n//       <table>\n//         <tbody>\n//           {board.map((row, rowIndex) => (\n//             <tr key={rowIndex}>\n//               {row.map((isClicked, colIndex) => (\n//                 <Cell value=\"0\" key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n \n// export default Gameboard;\n\nimport { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nfunction getRandomValue() {\n  let max = 36;\n  let min = 1;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst Gameboard = () => {\n  const [board, setBoard] = useState([\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n    [false, false, false, false, false, false],\n  ]);\n\n  const [values, setValues] = useState([]);\n\n  // Generate and store random values for each cell when component mounts\n  useEffect(() => {\n    const newValues = [];\n    for (let i = 0; i < board.length * board[0].length; i++) {\n      newValues.push(getRandomValue());\n    }\n    setValues(newValues);\n  }, []);\n\n  const handleClick = (row, col) => {\n    const updatedBoard = [...board];\n    updatedBoard[row][col] = !board[row][col];\n    setBoard(updatedBoard);\n  };\n\n  let numRows = board.length;\n  let numCols = board[0].length;\n\n  return (  \n    <div className=\"gameboard\">\n      <table>\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((isClicked, colIndex) => (\n                <Cell value={values[rowIndex * numCols + colIndex]} key={colIndex} isClicked={isClicked} onClick={() => handleClick(rowIndex, colIndex)} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Gameboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}