[{"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/index.js":"1","/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/App.js":"2","/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/reportWebVitals.js":"3","/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/Gameboard.js":"4","/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/Cell.js":"5"},{"size":535,"mtime":1683072122279,"results":"6","hashOfConfig":"7"},{"size":1116,"mtime":1684905870676,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1683072122279,"results":"9","hashOfConfig":"7"},{"size":8385,"mtime":1684905688374,"results":"10","hashOfConfig":"7"},{"size":844,"mtime":1683411137134,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1hc0ilv",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/index.js",[],[],[],"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/App.js",[],[],"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/reportWebVitals.js",[],[],"/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/Gameboard.js",["30","31","32","33","34","35","36","37","38","39","40","41","42","43"],[],"import { useState } from 'react';\n\nimport Cell from './Cell';\n\n//initializing table values\nlet previousRow = -1;\nlet previousCol = -1;\n\n//initializing time-tracking values\nvar start = 0;\nvar totalTime = 0;\n\n//initializing count of successful clicks\nlet count = 0;\n\nconst Gameboard = (props) => {\n\n  //initializing game tracking values\n  let gameOver = false;\n  let win = false;\n\n  //initializing level value using the level prop passed into \"Gameboard\"\n  let currentLevel = props.level;\n  if(currentLevel > 8){\n    currentLevel = 8;\n  }\n\n  //initializing number of rows and columns which will each be 1 greater than the current level\n  let r = currentLevel + 1;\n  let c = currentLevel + 1;\n\n  //initializing the random number generator\n  function getRandomValue() {\n    let max = r * c;\n    let min = 1;\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  //initializing the gameboard 2D array\n  const [driver, setDriver] = useState(() => {\n    const newDriver = [];\n    for (let i = 0; i < r; i++) {\n      newDriver[i] = [];\n      for (let j = 0; j < c; j++) {\n        //essentially the array holds a JavaScript object with three key-value pairs\n        newDriver[i][j] = { isClicked: false, value: getRandomValue(), canBe: false };\n      }\n    }\n    //setting that the first node in the upper left can be clicked\n    newDriver[0][0].canBe = true;\n    return newDriver;\n  });\n\n  //initializing memoization table for solution computation\n  const memoizationTable = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      rowCells.push(driver[i][j].value);\n    }\n    memoizationTable.push(rowCells);\n  }\n\n  let numRows = memoizationTable.length;\n  let numCols = memoizationTable[0].length;\n\n  //calculating the global solution using the values from the memoization table\n    memoizationTable[0][0] = driver[0][0].value;\n  for (let row = 1; row < numRows; row++) {\n    memoizationTable[row][0] = memoizationTable[row - 1][0] + driver[row][0].value;\n  }\n  for (let col = 1; col < numCols; col++) {\n    memoizationTable[0][col] = memoizationTable[0][col - 1] + driver[0][col].value;\n  }\n  for (let row = 1; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      let val = 0;\n      if (memoizationTable[row - 1][col] > memoizationTable[row][col - 1]) {\n        val = memoizationTable[row - 1][col];\n      } else {\n        val = memoizationTable[row][col - 1];\n      }\n      memoizationTable[row][col] = val + driver[row][col].value;\n    }\n  }\n\n  //target sum == the number in the lower right-hand corner of the memoization table\n  let targetSum = memoizationTable[numRows - 1][numCols - 1];\n\n  //function that runs every time a user clicks on a table cell\n  const handleClick = (row, col) => {\n    if(!gameOver){\n      //checking to see if the cell \"can\" be clicked (must be to the immediate right of the previous cell or immediately beneath)\n      if((row - 1 == previousRow && col == previousCol) || (row == previousRow && col - 1 == previousCol) || ((row == 0 && col == 0) && driver[row][col].isClicked == false)){\n        setDriver(prevDriver => {\n          count++;\n          if(count == 1){\n            //running stopwatch to track execution time\n            start = new Date().getTime();\n          }\n          const newDriver = [...prevDriver];\n\n          //setting the cell that was clicked to true\n          newDriver[row][col].isClicked = !newDriver[row][col].isClicked;\n\n          //checking to see if the next cells that can be clicked are in bounds\n          if(row + 1 < newDriver.length){\n            //setting can be clicked to true\n            newDriver[row + 1][col].canBe = true;\n          }\n          if(col + 1 < newDriver.length){\n            //setting can be clicked to true\n            newDriver[row][col + 1].canBe = true;\n          }\n          //updating the current cell so it can no longer be \"clicked\" as well as the other cell that may have been set to true\n          newDriver[row][col].canBe = false;\n          if((row - 1 >= 0) && (col + 1 < newDriver[0].length)){\n            newDriver[row - 1][col + 1].canBe = false;\n          }\n          if((col - 1 >= 0) && (row + 1 < newDriver.length)){\n            newDriver[row + 1][col - 1].canBe = false;\n          }\n\n          //updating previousRow and previousCol\n          previousRow = row;\n          previousCol = col;\n\n          return newDriver;\n        });\n      }\n    }\n  };\n\n  //summing the currently isClicked nodes\n  let currentSum = 0;\n  const gameboardRows = [];\n  for (let i = 0; i < r; i++) {\n    const rowCells = [];\n    for (let j = 0; j < c; j++) {\n      if(driver[i][j].isClicked){\n        currentSum += driver[i][j].value;\n      }\n      //if the sum of all clicked nodes is equal to the target sum and the game is over, player wins\n      if(driver[r - 1][c - 1].isClicked && currentSum == targetSum){\n        gameOver = true;\n        win = true;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Won!\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #1aff00\";\n        document.getElementById(\"winstatus\").style.color = \"#1aff00\";\n        document.getElementById(\"endbtn\").textContent = \"Next Level\";\n      }\n      //if the sum of all clicked nodes is not equal to the target sum and the game is over, player loses\n      if(driver[r - 1][c - 1].isClicked && currentSum != targetSum){\n        gameOver = true;\n        win = false;\n        var end = new Date().getTime();\n        var time = end - start;\n        totalTime = (time/1000).toFixed(2);\n        document.getElementById(\"time\").textContent = \"Your Time: \" + totalTime + \"s\";\n        document.getElementById(\"gameover\").textContent = \"Game Over\";\n        document.getElementById(\"aftergame\").style.visibility = \"visible\";\n        document.getElementById(\"winstatus\").textContent = \"You Lost\";\n        document.getElementById(\"winstatus\").style.textShadow = \"0 0 40px #ff0000\";\n        document.getElementById(\"winstatus\").style.color = \"#ff0000\";\n        document.getElementById(\"endbtn\").textContent = \"Play Again\";\n      }\n      //pushing all cells to the row\n      rowCells.push(\n        <Cell\n          key={`${i}-${j}`}\n          value={driver[i][j].value}\n          isClicked={driver[i][j].isClicked}\n          onClick={() => handleClick(i, j)}\n          isGameOver={gameOver}\n          winStatus={win}\n          canBeClicked={driver[i][j].canBe}\n        />\n      );\n    }\n    //pushing all rows to the gameboard\n    gameboardRows.push(<tr key={i}>{rowCells}</tr>);\n  }\n\n  //resetting the gameboard after the user clicks a button (\"Next Level\" or \"Play Again\")\n  const handleReset = () => {\n    if(!win){\n      window.location.reload();\n    }\n    else{\n      props.resetGame();\n\n      previousRow = -1;\n      previousCol = -1;\n      start = 0;\n      totalTime = 0;\n      count = 0;\n      currentSum = 0;\n  \n      gameOver = false;\n      win = false;\n  \n      setDriver(prevDriver => {\n  \n        currentLevel++;\n  \n        r = currentLevel + 1;\n        c = currentLevel + 1;\n  \n        const newDriver = [];\n      for (let i = 0; i < r; i++) {\n        newDriver[i] = [];\n        for (let j = 0; j < c; j++) {\n          newDriver[i][j] = { isClicked: false, value: getRandomValue() };\n        }\n      }\n      newDriver[0][0].canBe = true;\n      return newDriver;\n      });  \n      document.getElementById(\"aftergame\").style.visibility = \"hidden\";\n    }\n  };\n\n  // const handleRefresh = () => {\n  //   window.location.reload();\n  // };\n\n  return (\n          <div className=\"gameboard\">\n      <table>\n        <tbody>{gameboardRows}</tbody>\n      </table>\n      <div id=\"aftergame\" className=\"gameover\">\n            <h1 id=\"gameover\"></h1>\n            <h2 id=\"winstatus\"></h2>\n            <div className=\"runtime\">\n            <p id=\"time\"></p>\n          </div>\n          <div id=\"buttons\" className=\"buttons\">\n            <button onClick={handleReset} id=\"endbtn\">Next Level</button>\n          </div>\n          </div>\n    </div>\n  );\n};\n\nexport default Gameboard;","/Users/TylerHaisman/OneDrive/Coding Projects/Portfolio Projects/GlowbitGame/glowbit/Glowbit/src/Cell.js",["44"],[],"import React, { useState, useEffect } from \"react\";\n\nconst Cell = (props) => {\n  const [bgColor, setBgColor] = useState(\"#ffffff2e\");\n  const [shadow, setShadow] = useState(\"0 0 0px #1aff00a1\");\n  const [animate, setAnimate] = useState(\"pulsing 2s ease-in-out infinite\");\n\n  useEffect(() => {\n    if (props.isClicked) {\n      setBgColor(\"#ffffff6d\");\n    } \n    else {\n      setBgColor(\"#ffffff2e\");\n    }\n  }, [props.isClicked]);\n  useEffect(() => {\n    if (props.canBeClicked) {\n      setAnimate(\"pulsing 1.5s ease-in-out infinite\");\n    } \n    else {\n      setAnimate(\"\");\n    }\n  }, [props.canBeClicked]);\n\n  const handleClick = () => {\n    props.onClick();\n  };\n  return (\n    <th style={{ backgroundColor: bgColor, boxShadow: shadow, animation: animate}} onClick={handleClick}>\n      {props.value}\n    </th>\n  );\n};\n\nexport default Cell;\n",{"ruleId":"45","severity":1,"message":"46","line":94,"column":19,"nodeType":"47","messageId":"48","endLine":94,"endColumn":21},{"ruleId":"45","severity":1,"message":"46","line":94,"column":41,"nodeType":"47","messageId":"48","endLine":94,"endColumn":43},{"ruleId":"45","severity":1,"message":"46","line":94,"column":65,"nodeType":"47","messageId":"48","endLine":94,"endColumn":67},{"ruleId":"45","severity":1,"message":"46","line":94,"column":91,"nodeType":"47","messageId":"48","endLine":94,"endColumn":93},{"ruleId":"45","severity":1,"message":"46","line":94,"column":116,"nodeType":"47","messageId":"48","endLine":94,"endColumn":118},{"ruleId":"45","severity":1,"message":"46","line":94,"column":128,"nodeType":"47","messageId":"48","endLine":94,"endColumn":130},{"ruleId":"45","severity":1,"message":"46","line":94,"column":164,"nodeType":"47","messageId":"48","endLine":94,"endColumn":166},{"ruleId":"45","severity":1,"message":"46","line":97,"column":20,"nodeType":"47","messageId":"48","endLine":97,"endColumn":22},{"ruleId":"45","severity":1,"message":"46","line":144,"column":55,"nodeType":"47","messageId":"48","endLine":144,"endColumn":57},{"ruleId":"45","severity":1,"message":"49","line":159,"column":55,"nodeType":"47","messageId":"48","endLine":159,"endColumn":57},{"ruleId":"50","severity":1,"message":"51","line":162,"column":13,"nodeType":"52","messageId":"53","endLine":162,"endColumn":16},{"ruleId":"50","severity":1,"message":"54","line":163,"column":13,"nodeType":"52","messageId":"53","endLine":163,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":239,"column":13,"nodeType":"57","endLine":239,"endColumn":31},{"ruleId":"55","severity":1,"message":"56","line":240,"column":13,"nodeType":"57","endLine":240,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":5,"column":18,"nodeType":"52","messageId":"60","endLine":5,"endColumn":27},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'end' is already defined.","Identifier","redeclared","'time' is already defined.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-unused-vars","'setShadow' is assigned a value but never used.","unusedVar"]